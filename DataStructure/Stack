FILO
入栈push，出栈pop。Top变，bottom不变

用数组模拟栈
1. 用top表示栈顶，初始化为-1
2. 当有数据入栈的时候，top++; stack[top] = data;
3. 出栈 int valus = stack[top]; top--; return value;

package com.zjx.stack;

import java.util.Scanner;

public class ArrarStackDemo {
    public static void main(String[] args) {
        //测试
        ArrayStack arrayStack = new ArrayStack(4);
        String key = "";
        boolean loop = true;
        Scanner scanner = new Scanner(System.in);

        while (loop){
            System.out.println("s,显示栈");
            System.out.println("e,退出");
            System.out.println("pu,添加");
            System.out.println("po,出栈");
            System.out.println("请输入你的选择");
            key = scanner.next();
            switch (key){
                case "s":
                    arrayStack.list();
                    break;
                case "pu":
                    System.out.println("请输入一个数字");
                    int value = scanner.nextInt();
                    arrayStack.push(value);
                    break;
                case "po":
                    try {
                        int res = arrayStack.pop();
                        System.out.println("出栈的数据是" + res);
                    } catch (Exception e){
                        System.out.println(e.getMessage());
                    }
                    break;
                case "e":
                    scanner.close(); //记得先把scanner关闭
                    loop = false;
                    break;
            }

        }

        System.out.println("程序退出");

    }
}


//定义一个ArrayStack表示栈
class ArrayStack{
    private int maxSize; //栈的大小
    private int[] stack; //数组，数组模拟栈，数据就放在该数组
    private int top = -1; //top为栈顶，初始化为-1

    //构造器
    public ArrayStack(int maxSize) {
        this.maxSize = maxSize;
        stack = new int[this.maxSize];
    }

    //栈满
    public boolean isFull(){
        return top == maxSize - 1;
    }

    //栈空
    public boolean isEmpty(){
        return top == -1;
    }

    //入栈
    public void push(int value){
        if(isFull()){
            System.out.println("已满，无法入栈");
            return;
        }
        top++;
        stack[top] = value;
    }

    //出栈
    public int pop(){
        if(isEmpty()){
            throw new RuntimeException("栈已经空");
        }
        int value = stack[top];
        top--;
        return value;
    }

    //遍历栈，从栈顶开始输出
    public void list(){
        if (isEmpty()){
            System.out.println("没有数据");
            return;
        }
        for (int i = top; i >= 0; --i){
            System.out.printf("stack[%d]=%d\n", i, stack[i]);
        }
    }
}


用链表模拟栈
package com.zjx.stack;
import java.util.Scanner;

public class LinkedListStack {
    public static void main(String[] args) {
        int maxSize = 4;
        String key ="";
        Scanner scanner = new Scanner(System.in);

        //创建一个伪栈
        DummyStackByLinkedList dummyStackByLinkedList = new DummyStackByLinkedList(maxSize);

        boolean loop = true;
        while (loop){
            System.out.println("s,显示栈");
            System.out.println("e,退出");
            System.out.println("push,添加");
            System.out.println("pop,出栈");
            System.out.println("请输入你的选择");
            key = scanner.next();
            switch (key){
                case "s":
                    try {
                        dummyStackByLinkedList.list();
                    } catch (Exception e){
                        System.out.println(e.getMessage());
                    }
                    break;
                case "push":
                    System.out.println("请输入一个数字");
                    int value = scanner.nextInt();
                    node newNode = new node(value);
                    dummyStackByLinkedList.push(newNode);
                    break;
                case "pop":
                    try {
                        int res = dummyStackByLinkedList.pop();
                        System.out.println("出栈的数据是" + res);
                    } catch (Exception e){
                        System.out.println(e.getMessage());
                    }
                    break;
                case "e":
                    scanner.close(); //记得先把scanner关闭
                    loop = false;
                    break;
            }

        }

        System.out.println("程序退出");
    }
}

//用头插法构造栈
class DummyStackByLinkedList{
    //构造头节点
    private node headNode = new node(0);
    //构造栈的大小
    private int maxSize;
    //构造器


    public DummyStackByLinkedList(int maxSize) {
        this.maxSize = maxSize;
    }

    //判断栈空
    public boolean isEmpty(){
        return headNode.next == null;
    }

    //判断栈满
    public boolean isFull(){
        node temp = headNode;
        int count = 0;
        while (true){
            if(temp.next == null) break;
            temp = temp.next;
            count++;
        }
        return  count == maxSize;
    }

    //显示伪栈中的所有元素
    public void list(){
        if (isEmpty()){
            throw new RuntimeException("伪栈为空，没有元素");
        }
        node temp = headNode.next;
        while (true){
            if (temp == null) break; //这个方法好！！！！
            System.out.println(temp.toString());
            temp = temp.next;
        }
    }

    //向伪栈中添加节点
    public void push(node newNode){
        if (isFull()){
            System.out.println("伪栈已满，无法添加");
            return;
        }
        if(isEmpty()){
            headNode.next = newNode;
            return;
        }
        node temp = headNode.next;
        newNode.next = temp;
        headNode.next = newNode;
    }

    //从伪栈中pop
    public int pop(){
        if(isEmpty()){
            throw new RuntimeException("伪栈为空，不能pop");
        }
        node temp = headNode.next;
        int value = temp.no;
        headNode.next = temp.next;
        return value;
    }
}

//创建节点
class node{
    public int no;
    public node next;

    //构造器
    public node(int no) {
        this.no = no;
    }

    @Override
    public String toString() {
        return "node{" +
                "no=" + no +
                '}';
    }
}


用栈完成计算器（加减乘除）
两个栈，一个是数栈，一个是符号栈
通过一个index来遍历我们的表达式，如果是数字就如数栈，如果是符号（1）若符号栈为空，就直接入栈 （2）如果有操作符，比较优先级。如果当前的符号的优先级小于或等于栈中的操作符，
就从数栈中pop两个数，再从符号栈中pop一个符号，进行运算，得到的结果入数字栈，然后将当前的操作符入符号栈。如果当前符号的优先级大于栈中的操作符，就入栈。
扫描完毕后，就顺序从数栈和符号栈pop出相应的数字和符号，并允许。最后数字栈的数字就是结果

package com.zjx.stack;

import edu.princeton.cs.algs4.In;

public class Calculator {
    public static void main(String[] args) {
        String expression = "30+2*6-2";
        //创建数栈和符号栈
        ArrayStack2 numStack = new ArrayStack2(10);
        ArrayStack2 operStack = new ArrayStack2(10);
        //定义需要的变量
        int index = 0; //用于扫描
        int num1 = 0;
        int num2 = 0;
        int oper = 0;
        int res = 0;
        char ch = ' '; //将每次扫描得到char保存到ch
        String keepNum = ""; //用来拼接多位数

        //开始循环扫描expression
        while (true){
            ch = expression.substring(index, index + 1).charAt(0);
            if (operStack.isOper(ch)){
                //如果是运算符
                if (!operStack.isEmpty()) {
                    //处理（比较优先级）
                    if (operStack.priority(ch) <= operStack.priority(operStack.peek())) {
                        //当前优先级小于或者等于栈中的oper，则要pop两个数，一个运算符，进行运算
                        num1 = numStack.pop();
                        num2 = numStack.pop();
                        oper = operStack.pop();
                        res = numStack.cal(num1, num2, (char) oper);
                        numStack.push(res);
                        operStack.push(ch);
                    }else {//当前优先级大于栈中的oper，直接入栈
                        operStack.push(ch);  //注意，ch是当前处理的，oper是从栈中pop出来的
                    }
                }else {//为空直接入栈
                    operStack.push(ch);
                }
            }else { //不是运算符
                //如果是数，则直接入栈
                //numStack.push(ch - 48); //注意如果直接存ch的话，是ch的ASCII
                //注意：如果是多位数，不能找到一个数字就直接入栈，需要想expression后面再看一位
                //需要定义字符串变量，用于拼接
                keepNum += ch;

                //如果ch是最后一位，则直接入栈
                if (index == expression.length() - 1){
                    numStack.push(Integer.parseInt(keepNum));
                }else{
                    if (operStack.isOper(expression.substring(index+1, index+2).charAt(0))){
                        //如果后一位是运算符，则入栈
                        numStack.push(Integer.parseInt(keepNum));
                        //非常重要！！记得清空keepNum
                        keepNum = "";
                    }
                }
            }
            //继续遍历String
            index++;
            if(index >= expression.length()) break;
        }

        //开始顺序从数栈和符号栈pop，进行运行
        while (true){
            if (operStack.isEmpty()) break;
            num1 = numStack.pop();
            num2 = numStack.pop();
            oper = operStack.pop();
            res = numStack.cal(num1, num2, (char) oper);
            numStack.push(res);
        }

        //最后一个数pop
        int res2 = numStack.pop();
        System.out.printf("表达式%s = %d", expression, res2);
    }
}

//先创建一个栈
class ArrayStack2{
    private int maxSize; //栈的大小
    private int[] stack; //数组，数组模拟栈，数据就放在该数组
    private int top = -1; //top为栈顶，初始化为-1

    //构造器
    public ArrayStack2(int maxSize) {
        this.maxSize = maxSize;
        stack = new int[this.maxSize];
    }

    //栈满
    public boolean isFull(){
        return top == maxSize - 1;
    }

    //栈空
    public boolean isEmpty(){
        return top == -1;
    }

    //入栈
    public void push(int value){
        if(isFull()){
            System.out.println("已满，无法入栈");
            return;
        }
        top++;
        stack[top] = value;
    }

    //出栈
    public int pop(){
        if(isEmpty()){
            throw new RuntimeException("栈已经空");
        }
        int value = stack[top];
        top--;
        return value;
    }

    //peek方法，返回栈顶的值
    public int peek(){
        return stack[top];
    }

    //遍历栈，从栈顶开始输出
    public void list(){
        if (isEmpty()){
            System.out.println("没有数据");
            return;
        }
        for (int i = top; i >= 0; --i){
            System.out.printf("stack[%d]=%d\n", i, stack[i]);
        }
    }

    //返回运算符的优先级，优先级使用数字表示，数字越大优先级越高
    public int priority (int oper){
        if(oper == '*' || oper == '/') return 1;
        else if (oper == '+' || oper == '-')return 0;
        else return -1;
    }

    //判断是否为运算符
    public boolean isOper(char val){
        return val == '+' || val == '-' || val == '*' || val == '/';
    }

    //计算方法
    public int cal(int num1, int num2, char oper){
        int res = 0; //存放运算结果
        switch (oper){
            case '+':
                res = num1 + num2;
                break;
            case '-':
                res = num2 - num1;
                break;
            case '*':
                res = num1 * num2;
                break;
            case '/':
                res = num2 / num1;
                break;
        }
        return res;
    }
}

（3+4）*5-6
前缀表达式：波兰式，运算符位于操作数之前，从右向左扫描，数字进栈，遇到运算符弹出两个数字。  - * + 3 4 5 6
中缀表达式：上面写的就是中缀表达式。
后缀表达式：逆波兰式，运算符位于操作数之后。3 4 + 5 * 6 -

逆波兰计算器
1. 输入一个逆波兰表达式，使用stack计算其结果
2. 支持小括号和多位整数

package com.zjx.stack;

import edu.princeton.cs.algs4.In;

import java.util.ArrayList;
import java.util.List;
import java.util.Stack;

public class PolandNotation {
    public static void main(String[] args) {
        //先定义一个逆波兰表达式 （3+4）*5-6 => 3 4 + 5 * 6 -
        //为了方便，数字和符号使用空格隔开
        String suffixExpression = "3 4 + 5 * 6 -";
        //先将3 4 + 5 * 6 -放到一个arrayList中，将arrayList传递给一个方法，配合栈完成

        List<String> rpnList = getListString(suffixExpression);
        System.out.println("rpnList =" + rpnList);

        int res = calculate(rpnList);
        System.out.println("计算的结果是 rpnList = " + res);
    }

    //将数据和运算符放到ArrayList中
    public static List<String> getListString(String suffixExpression){
        //将suffixExpression分割
        String[] split = suffixExpression.split(" ");
        List<String> list = new ArrayList<String>();
        for(String ele : split){
            list.add(ele);
        }
        return list;
    }

    //完成对逆波兰表达式的运算

    /*
    从左至右扫描，将3和4压入堆栈；
    遇到+运算符，因此弹出4和3（4为栈顶元素，3为次顶元素），计算出3+4的值，得7，再将7入栈；
    将5入栈；
    接下来是×运算符，因此弹出5和7，计算出7×5=35，将35入栈；
    将6入栈；
    最后是-运算符，计算出35-6的值，即29，由此得出最终结果
     */
    public static int calculate(List<String> ls){
        //创建一个栈即可
        Stack<String> stack = new Stack<>();
        //遍历ls
        for (String item:ls) {
            //使用一个正则表达式来取数
            if(item.matches("\\d+")){//匹配的是多位数
                //入栈
                stack.push(item);
            } else {
                int num2 = Integer.parseInt(stack.pop()); //字符串转整数的好方法
                int num1 = Integer.parseInt(stack.pop());
                int res = 0;
                if (item.equals("+")) res = num1 + num2;
                else if (item.equals("-")) res = num1 - num2;
                else if (item.equals("*")) res = num1 * num2;
                else if (item.equals("/")) res = num1 / num2;
                else throw new RuntimeException("运算符有误");
                stack.push(res + ""); //把整数转成字符串的简单做法！！！
            }
        }
        return Integer.parseInt(stack.pop());
    }
}

中缀表达式转后缀表达式：
1) 初始化两个栈：运算符栈s1和储存中间结果的栈s2；
2) 从左至右扫描中缀表达式；
3) 遇到操作数时，将其压s2；
4) 遇到运算符时，比较其与s1栈顶运算符的优先级：
(1)如果s1为空，或栈顶运算符为左括号“(”，则直接将此运算符入栈；
(2)否则，若优先级比栈顶运算符的高，也将运算符压入s1；
(3)否则，将s1栈顶的运算符弹出并压入到s2中，再次转到(4-1)与s1中新的栈顶运算符相比较；
5) 遇到括号时：
(1) 如果是左括号“(”，则直接压入s1
(2) 如果是右括号“)”，则依次弹出s1栈顶的运算符，并压入s2，直到遇到左括号为止，此时将这一对括号丢弃
6) 重复步骤2至5，直到表达式的最右边
7) 将s1中剩余的运算符依次弹出并压入s2
8) 依次弹出s2中的元素并输出，结果的逆序即为中缀表达式对应的后缀表达式


