图
(1) 存储顶点String，使用ArrayList
(2) 保存矩阵 int[][] edgs

package com.zjx.graph;

import java.util.ArrayList;
import java.util.Arrays;

public class Graph {
    private ArrayList<String> vertexList; //存顶点
    private int[][] edges; //存储图对应的邻接矩阵
    private int numOfEdges; //表示边的数目

    public static void main(String[] args) {
        int n = 5; //5个节点
        String vertexValue[] = {"A","B","C","D","E"};
        Graph graph = new Graph(n);
        //添加顶点
        for (String value: vertexValue) {
            graph.insertVertex(value);
        }
        //添加边 A-B A-C B-C B-D B-E
        graph.insertEdge(0, 1, 1);
        graph.insertEdge(0, 2, 1);
        graph.insertEdge(1, 2, 1);
        graph.insertEdge(1, 3, 1);
        graph.insertEdge(1, 4, 1);
        //显示
        graph.showGraph();
    }
    //构造器
    public Graph(int n){
        //初始化
        edges = new int[n][n];
        vertexList = new ArrayList<>(n);
        numOfEdges = 0;

    }
    //插入顶点
    public void insertVertex(String vertex){
        vertexList.add(vertex);
    }
    /**
     * 添加边
     * @param v1 表示点的下标，即是第几个节点
     * @param v2 第二个顶点对应下标
     * @param weight 表示是否相连
     */
    public void insertEdge(int v1, int v2, int weight){
        edges[v1][v2] = weight;
        edges[v2][v1] = weight;
        numOfEdges++;
    }
    //返回节点个数
    public int getNumOfVertex(){
        return vertexList.size();
    }
    //返回边的个数
    public int getNumOfEdges(){
        return numOfEdges;
    }
    //返回节点i对应的值
    public String getValueByIndex(int i){
        return vertexList.get(i);
    }
    //返回v1和v2的权值
    public int getWeight(int v1, int v2){
        return edges[v1][v2];
    }
    //显示图对应的矩阵
    public void showGraph(){
        for (int[] link: edges) {
            System.out.println(Arrays.toString(link));
        }
    }
}


