图
(1) 存储顶点String，使用ArrayList
(2) 保存矩阵 int[][] edgs

package com.zjx.graph;

import java.util.ArrayList;
import java.util.Arrays;

public class Graph {
    private ArrayList<String> vertexList; //存顶点
    private int[][] edges; //存储图对应的邻接矩阵
    private int numOfEdges; //表示边的数目

    public static void main(String[] args) {
        int n = 5; //5个节点
        String vertexValue[] = {"A","B","C","D","E"};
        Graph graph = new Graph(n);
        //添加顶点
        for (String value: vertexValue) {
            graph.insertVertex(value);
        }
        //添加边 A-B A-C B-C B-D B-E
        graph.insertEdge(0, 1, 1);
        graph.insertEdge(0, 2, 1);
        graph.insertEdge(1, 2, 1);
        graph.insertEdge(1, 3, 1);
        graph.insertEdge(1, 4, 1);
        //显示
        graph.showGraph();
    }
    //构造器
    public Graph(int n){
        //初始化
        edges = new int[n][n];
        vertexList = new ArrayList<>(n);
        numOfEdges = 0;

    }
    //插入顶点
    public void insertVertex(String vertex){
        vertexList.add(vertex);
    }
    /**
     * 添加边
     * @param v1 表示点的下标，即是第几个节点
     * @param v2 第二个顶点对应下标
     * @param weight 表示是否相连
     */
    public void insertEdge(int v1, int v2, int weight){
        edges[v1][v2] = weight;
        edges[v2][v1] = weight;
        numOfEdges++;
    }
    //返回节点个数
    public int getNumOfVertex(){
        return vertexList.size();
    }
    //返回边的个数
    public int getNumOfEdges(){
        return numOfEdges;
    }
    //返回节点i对应的值
    public String getValueByIndex(int i){
        return vertexList.get(i);
    }
    //返回v1和v2的权值
    public int getWeight(int v1, int v2){
        return edges[v1][v2];
    }
    //显示图对应的矩阵
    public void showGraph(){
        for (int[] link: edges) {
            System.out.println(Arrays.toString(link));
        }
    }
}


深度优先：
1） 访问初始节点v，并标记v已访问
2） 查找节点v的第一个邻接点w
3） 若w存在，则继续执行4，如果w不存在，则回到第1步，将从v的下一个节点继续
4） 若w未被访问，对w进行深度优先遍历递归（即把w当作另一个v，然后进行步骤123）
5） 查找节点v的w邻接点的下一个邻接点，返回步骤3

package com.zjx.graph;

import java.util.ArrayList;
import java.util.Arrays;

public class Graph {
    private ArrayList<String> vertexList; //存顶点
    private int[][] edges; //存储图对应的邻接矩阵
    private int numOfEdges; //表示边的数目
    private boolean[] isVisited; //true表示访问过

    public static void main(String[] args) {
        int n = 5; //5个节点
        String vertexValue[] = {"A","B","C","D","E"};
        Graph graph = new Graph(n);
        //添加顶点
        for (String value: vertexValue) {
            graph.insertVertex(value);
        }
        //添加边 A-B A-C B-C B-D B-E
        graph.insertEdge(0, 1, 1);
        graph.insertEdge(0, 2, 1);
        graph.insertEdge(1, 2, 1);
        graph.insertEdge(1, 3, 1);
        graph.insertEdge(1, 4, 1);
        //显示
        graph.showGraph();

        graph.dfs();
    }
    //构造器
    public Graph(int n){
        //初始化
        edges = new int[n][n];
        vertexList = new ArrayList<>(n);
        numOfEdges = 0;
        isVisited = new boolean[n];
    }
    //插入顶点
    public void insertVertex(String vertex){
        vertexList.add(vertex);
    }
    /**
     * 添加边
     * @param v1 表示点的下标，即是第几个节点
     * @param v2 第二个顶点对应下标
     * @param weight 表示是否相连
     */
    public void insertEdge(int v1, int v2, int weight){
        edges[v1][v2] = weight;
        edges[v2][v1] = weight;
        numOfEdges++;
    }
    //返回节点个数
    public int getNumOfVertex(){
        return vertexList.size();
    }
    //返回边的个数
    public int getNumOfEdges(){
        return numOfEdges;
    }
    //返回节点i对应的值
    public String getValueByIndex(int i){
        return vertexList.get(i);
    }
    //返回v1和v2的权值
    public int getWeight(int v1, int v2){
        return edges[v1][v2];
    }
    //显示图对应的矩阵
    public void showGraph(){
        for (int[] link: edges) {
            System.out.println(Arrays.toString(link));
        }
    }
    /**
     * 得到邻接节点的下标
     * @param index
     * @return 返回对应的下标，负责返回-1
     */
    public int getFirstNeighbor(int index){
        for (int j = 0; j < vertexList.size(); j++) {
            if (edges[index][j] > 0) return j;
        }
        return -1;
    }
    //根据前一个邻接节点的下标来获取下一个邻接节点
    public int getNextNeighbor(int v1, int v2){
        for (int j = v2 + 1; j < vertexList.size(); j++) {
            if (edges[v1][j] > 0)return j;
        }
        return -1;
    }
    //深度优先遍历算法
    public void dfs(boolean[] isVisited, int i){
        //首先访问该节点
        System.out.print(getValueByIndex(i) + "->");
        //将该节点设为已经访问
        isVisited[i] = true;
        //查找节点i的第一个邻接节点w
        int w = getFirstNeighbor(i);
        while (w != -1){
            if (!isVisited[w]) dfs(isVisited, w);
            //如果w已经被访问过
            w = getNextNeighbor(i ,w);
        }
    }
    //对dfs重载
    public void dfs(){
        //遍历所有节点，进行dfs
        for (int i = 0; i < getNumOfVertex(); i++) {
            if (!isVisited[i]) dfs(isVisited, i);
        }
    }
}

