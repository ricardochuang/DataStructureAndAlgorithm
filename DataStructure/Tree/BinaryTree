树有很多种，每个节点最多只能有两个子节点的一种形式称为二叉树。
二叉树的子节点分为左节点和右节点。
如果该二叉树的所有叶子节点都在最后一层，并且结点总数= 2^n -1 , n 为层数，则我们称为满二叉树。
如果该二叉树的所有叶子节点都在最后一层或者倒数第二层，而且最后一层的叶子节点在左边连续，倒数第二层的叶子节点在右边连续，我们称为完全二叉树。

前序：父 -> 左 -> 右
中序：左 -> 父 -> 右
后序：左 -> 右 -> 父

package com.zjx.tree;

public class BinaryTree {
    public static void main(String[] args) {
        //先创建二叉树
        HeroNode root = new HeroNode(1, "宋江");
        HeroNode node2 = new HeroNode(2, "吴用");
        HeroNode node3 = new HeroNode(3, "卢俊义");
        HeroNode node4 = new HeroNode(4, "林冲");
        BinaryTreeDemo binaryTreeDemo = new BinaryTreeDemo(root);
        //先手动创建二叉树，之后递归创建二叉树
        root.setLeft(node2); //因为left是私有，因此不能用root.left = node2;
        root.setRight(node3);
        node3.setRight(node4);

        //测试
        System.out.println("前序遍历");
        binaryTreeDemo.preOrder();
        System.out.println("中序遍历");
        binaryTreeDemo.infixOrder();
        System.out.println("后序遍历");
        binaryTreeDemo.postOrder();


    }
}

//创建hero节点
class HeroNode{
    private int no;
    private String name;
    private HeroNode left;
    private HeroNode right;

    public HeroNode(int no, String name) {
        this.no = no;
        this.name = name;
    }

    public int getNo() {
        return no;
    }

    public void setNo(int no) {
        this.no = no;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public HeroNode getLeft() {
        return left;
    }

    public void setLeft(HeroNode left) {
        this.left = left;
    }

    public HeroNode getRight() {
        return right;
    }

    public void setRight(HeroNode right) {
        this.right = right;
    }

    @Override
    public String toString() {
        return "HeroNode{" +
                "no=" + no +
                ", name='" + name + '\'' +
                '}';
    }
    //前序遍历
    public void preOrder(){
        System.out.println(this); //先输出父节点
        //递归向左子树
        if (this.left != null) this.left.preOrder();
        //递归向右子树
        if (this.right != null) this.right.preOrder();
    }

    //中序遍历
    public void infixOrder(){
        //递归向左子树
        if (this.left != null) this.left.preOrder();
        System.out.println(this); //输出父节点
        //递归向右子树
        if (this.right != null) this.right.preOrder();
    }

    //后序遍历
    public void postOrder(){
        //递归向左子树
        if (this.left != null) this.left.preOrder();
        //递归向右子树
        if (this.right != null) this.right.preOrder();
        System.out.println(this); //输出父节点
    }
}

//创建二叉树
class BinaryTreeDemo{
    private HeroNode root;

    public BinaryTreeDemo(HeroNode root) {
        this.root = root;
    }


    //前序
    public void preOrder(){
        if (this.root != null){
            this.root.preOrder(); //这样调用之后，preOrder中的this就指向root，因为谁调用，this就指向谁
        }else {
            System.out.println("当前二叉树为空，无法遍历");
        }
    }

    //中序
    public void infixOrder(){
        if (this.root != null){
            this.root.infixOrder(); //这样调用之后，preOrder中的this就指向root，因为谁调用，this就指向谁
        }else {
            System.out.println("当前二叉树为空，无法遍历");
        }
    }

    //后序
    public void postOrder(){
        if (this.root != null){
            this.root.postOrder(); //这样调用之后，preOrder中的this就指向root，因为谁调用，this就指向谁
        }else {
            System.out.println("当前二叉树为空，无法遍历");
        }
    }
}


查找指定节点
使用前序、中序、后序来查询指定的节点
前序的思路： 
1. 先判断当前节点的no是否等于要查找的。如果相等，返回当前节点。如果不等，判断左子节点是否为空，不是空就递归。
2. 如果左递归找到，返回，否则右递归

package com.zjx.tree;

public class BinaryTree {
    public static void main(String[] args) {
        //先创建二叉树
        HeroNode root = new HeroNode(1, "宋江");
        HeroNode node2 = new HeroNode(2, "吴用");
        HeroNode node3 = new HeroNode(3, "卢俊义");
        HeroNode node4 = new HeroNode(4, "林冲");
        HeroNode node5 = new HeroNode(5, "关胜");
        BinaryTreeDemo binaryTreeDemo = new BinaryTreeDemo(root);
        //先手动创建二叉树，之后递归创建二叉树
        root.setLeft(node2); //因为left是私有，因此不能用root.left = node2;
        root.setRight(node3);
        node3.setLeft(node5);
        node3.setRight(node4);

        //测试
        System.out.println("前序遍历");
        binaryTreeDemo.preOrder();
        System.out.println("中序遍历");
        binaryTreeDemo.infixOrder();
        System.out.println("后序遍历");
        binaryTreeDemo.postOrder();

        //测试遍历查找
        System.out.println("前序遍历方式~~~");
        HeroNode resNode1 = binaryTreeDemo.preOrderSearch(5);
        if (resNode1 != null) System.out.printf("找到了，信息为no = %d name = %s", resNode1.getNo(), resNode1.getName());
        else System.out.println("没有找到");

        System.out.println();
        System.out.println("中序遍历方式~~~");
        HeroNode resNode2 = binaryTreeDemo.infixOrderSearch(5);
        if (resNode2 != null) System.out.printf("找到了，信息为no = %d name = %s", resNode2.getNo(), resNode2.getName());
        else System.out.println("没有找到");

        System.out.println();
        System.out.println("前序遍历方式~~~");
        HeroNode resNode3 = binaryTreeDemo.postOrderSearch(5);
        if (resNode3 != null) System.out.printf("找到了，信息为no = %d name = %s", resNode3.getNo(), resNode3.getName());
        else System.out.println("没有找到");

    }
}

//创建hero节点
class HeroNode{
    private int no;
    private String name;
    private HeroNode left;
    private HeroNode right;

    public HeroNode(int no, String name) {
        this.no = no;
        this.name = name;
    }

    public int getNo() {
        return no;
    }

    public void setNo(int no) {
        this.no = no;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public HeroNode getLeft() {
        return left;
    }

    public void setLeft(HeroNode left) {
        this.left = left;
    }

    public HeroNode getRight() {
        return right;
    }

    public void setRight(HeroNode right) {
        this.right = right;
    }

    @Override
    public String toString() {
        return "HeroNode{" +
                "no=" + no +
                ", name='" + name + '\'' +
                '}';
    }
    //前序遍历
    public void preOrder(){
        System.out.println(this); //先输出父节点
        //递归向左子树
        if (this.left != null) this.left.preOrder();
        //递归向右子树
        if (this.right != null) this.right.preOrder();
    }

    //中序遍历
    public void infixOrder(){
        //递归向左子树
        if (this.left != null) this.left.preOrder();
        System.out.println(this); //输出父节点
        //递归向右子树
        if (this.right != null) this.right.preOrder();
    }

    //后序遍历
    public void postOrder(){
        //递归向左子树
        if (this.left != null) this.left.preOrder();
        //递归向右子树
        if (this.right != null) this.right.preOrder();
        System.out.println(this); //输出父节点
    }
    //前序查找
    public HeroNode preOrderSearch(int no){
        HeroNode resNode = null;
        //比较当前节点是不是
        if (this.no == no) return this;
        if (this.left != null) resNode = this.left.preOrderSearch(no);
        if (resNode != null) return resNode;
        if (this.right != null) resNode = this.right.preOrderSearch(no);
        return resNode; //不管最后找到没，都得返回了
    }
    //中序查找
    public HeroNode infixOrderSearch(int no){
        HeroNode resNode = null;
        if (this.left != null) resNode = this.left.infixOrderSearch(no);
        if (resNode != null) return resNode;
        //比较当前节点是不是
        if (this.no == no) return this;
        if (this.right != null) resNode = this.right.infixOrderSearch(no);
        return resNode; //不管最后找到没，都得返回了
    }
    //后序查找
    public HeroNode postOrderSearch(int no){
        HeroNode resNode = null;
        if (this.left != null) resNode = this.left.postOrderSearch(no);
        if (resNode != null) return resNode;
        if (this.right != null) resNode = this.right.postOrderSearch(no);
        if (resNode != null) return resNode; //不管最后找到没，都得返回了
        //比较当前节点是不是
        if (this.no == no) return this;
        return resNode;
    }
}

//创建二叉树
class BinaryTreeDemo{
    private HeroNode root;

    public BinaryTreeDemo(HeroNode root) {
        this.root = root;
    }


    //前序
    public void preOrder(){
        if (this.root != null){
            this.root.preOrder(); //这样调用之后，preOrder中的this就指向root，因为谁调用，this就指向谁
        }else {
            System.out.println("当前二叉树为空，无法遍历");
        }
    }

    //中序
    public void infixOrder(){
        if (this.root != null){
            this.root.infixOrder(); //这样调用之后，preOrder中的this就指向root，因为谁调用，this就指向谁
        }else {
            System.out.println("当前二叉树为空，无法遍历");
        }
    }

    //后序
    public void postOrder(){
        if (this.root != null){
            this.root.postOrder(); //这样调用之后，preOrder中的this就指向root，因为谁调用，this就指向谁
        }else {
            System.out.println("当前二叉树为空，无法遍历");
        }
    }

    //前序查找
    public HeroNode preOrderSearch(int no){
        if(root != null) return root.preOrderSearch(no);
        else return null;
    }
    //中序遍历
    public HeroNode infixOrderSearch(int no){
        if (root != null) return root.infixOrderSearch(no);
        else return null;
    }
    //后序遍历
    public HeroNode postOrderSearch(int no){
        if (root != null) return root.postOrderSearch(no);
        else return null;
    }
}

删除节点（简单版本）
1. 如果是叶子节点，直接删除节点
2. 如果是非叶子节点，删除子树

思路：
首先看看root是不是null，或者root是不是要被删除
1. 因为二叉树是单向的，所以不能直接找待删除的节点
2. 如果当前节点的左子节点不为空，并且左子节点就是要删除的节点，就将 this.left = null; 然后返回
3. 如果当前节点的右子节点不为空，并且右子节点就是要删除的节点，就将 this.right = null; 然后返回
4. 向左递归，向右递归






