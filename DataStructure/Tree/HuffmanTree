赫夫曼树
路径长度：分支中的数目。从根节点到第L层的路径长度是L-1.
节点的权：人为赋予的数字（最简单就是给定的数字）
节点的带权路径长度： 从根节点到该节点的路径长度与该节点的权的乘积。
树的带权路径长度（wpl）：所有叶子节点的带权路径长度之和。
WPL最小的为赫夫曼树

构建赫夫曼树的步骤
1. 从小到大排序，每个数据是一个节点，每个节点都是一个简单的二叉树
2. 取出根节点权值最小的两颗二叉树
3. 组成一颗新的二叉树，该新的二叉树的根节点的权值是前面二叉树根节点权值
4. 再将这个新的二叉树，以根节点的权值大小再次排序，不断重复1-2-3-4的步骤，直到

package com.zjx.huffmantree;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class HuffmanTree {
    public static void main(String[] args) {
        int[] arr = {13, 7, 8, 3, 29, 6, 1};
        Node root = createHuffmanTree(arr);
        preOrder(root);
    }
    public static void preOrder(Node root){
        if (root != null) root.preOrder();
        else System.out.println("无法遍历");
    }
    //创建赫夫曼树的方法
    public static Node createHuffmanTree(int[] arr) {
        //第一步，遍历arr，将每个元素构建成一个Node，然后放入ArrayList中
        List<Node> nodes = new ArrayList<>();
        for (int value : arr) {
            nodes.add(new Node(value));
        }
        while (nodes.size() > 1){
            //排序，从小到大
            Collections.sort(nodes);
            //取出根节点最小的两个节点(二叉树)
            Node leftNode = nodes.get(0);
            Node rightNode = nodes.get(1);
            //构建新的二叉树
            Node parent = new Node(leftNode.value + rightNode.value);
            parent.left = leftNode;
            parent.right = rightNode;
            //从ArrayList中删除处理过的二叉树
            nodes.remove(leftNode);
            nodes.remove(rightNode);
            //加入parent
            nodes.add(parent);
        }
        return nodes.get(0);
    }
}
//创建节点类
//为了让Node对象支持排序，要实现comparable接口
class Node implements Comparable<Node> {
    int value; //节点权值
    Node left; //指向左子节点
    Node right; //指向右子节点
    //前序遍历
    public void preOrder(){
        System.out.println(this);
        if (this.left != null) this.left.preOrder();
        if (this.right != null) this.right.preOrder();
    }
    public Node(int value) {
        this.value = value;
    }
    @Override
    public String toString() {
        return "Node{" +
                "value=" + value +
                '}';
    }
    @Override
    public int compareTo(Node o) {
        return this.value - o.value; //从小到达排序，取负数则表示从大到小
    }
}
