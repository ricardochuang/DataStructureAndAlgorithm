n个节点的二叉链表中含有n+1和空指针域。利用二叉链表的中的空指针域，存放指向该节点在某种遍历次序下的前驱和后继节点的指针。（这种附加指针成为 线索）
加上了线索的二叉链表称为线索链表，相应的二叉树称为线索二叉树，可以分为 前序二叉树，中序二叉树，后序二叉树
一个节点的前一个节点称为前驱节点
一个节点的后一个节点成为后继节点

package com.zjx.tree.threadedbinarytree;

public class ThreadedBinaryTree {
    public static void main(String[] args) {
        HeroNode root = new HeroNode(1, "tom");
        HeroNode node2 = new HeroNode(3, "jack");
        HeroNode node3 = new HeroNode(6, "smith");
        HeroNode node4 = new HeroNode(8, "mary");
        HeroNode node5 = new HeroNode(10, "king");
        HeroNode node6 = new HeroNode(14, "dim");

        //二叉树手动创建
        root.setLeft(node2);
        root.setRight(node3);
        node2.setLeft(node4);
        node2.setRight(node5);
        node3.setLeft(node6);

        //测试线索化
        ThreadedBinaryTreeDemo threadedBinaryTreeDemo = new ThreadedBinaryTreeDemo(root);
        threadedBinaryTreeDemo.threadedNodes(root);
        //用node5做测试
        HeroNode leftNode = node5.getLeft();
        System.out.println(leftNode);
    }
}
//创建hero节点
class HeroNode{
    private int no;
    private String name;
    private HeroNode left;
    private HeroNode right;

    //type为0，则表示指向子树，为1则表示指向前驱/后继结点
    private int leftType;
    private int rightType;

    public HeroNode(int no, String name) {
        this.no = no;
        this.name = name;
    }

    public int getNo() {
        return no;
    }

    public void setNo(int no) {
        this.no = no;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public HeroNode getLeft() {
        return left;
    }

    public void setLeft(HeroNode left) {
        this.left = left;
    }

    public HeroNode getRight() {
        return right;
    }

    public void setRight(HeroNode right) {
        this.right = right;
    }

    public int getLeftType() {
        return leftType;
    }

    public void setLeftType(int leftType) {
        this.leftType = leftType;
    }

    public int getRightType() {
        return rightType;
    }

    public void setRightType(int rightType) {
        this.rightType = rightType;
    }

    @Override
    public String toString() {
        return "HeroNode{" +
                "no=" + no +
                ", name='" + name + '\'' +
                '}';
    }
    //前序遍历
    public void preOrder(){
        System.out.println(this); //先输出父节点
        //递归向左子树
        if (this.left != null) this.left.preOrder();
        //递归向右子树
        if (this.right != null) this.right.preOrder();
    }

    //中序遍历
    public void infixOrder(){
        //递归向左子树
        if (this.left != null) this.left.preOrder();
        System.out.println(this); //输出父节点
        //递归向右子树
        if (this.right != null) this.right.preOrder();
    }

    //后序遍历
    public void postOrder(){
        //递归向左子树
        if (this.left != null) this.left.preOrder();
        //递归向右子树
        if (this.right != null) this.right.preOrder();
        System.out.println(this); //输出父节点
    }
    //前序查找
    public HeroNode preOrderSearch(int no){
        HeroNode resNode = null;
        //比较当前节点是不是
        if (this.no == no) return this;
        if (this.left != null) resNode = this.left.preOrderSearch(no);
        if (resNode != null) return resNode;
        if (this.right != null) resNode = this.right.preOrderSearch(no);
        return resNode; //不管最后找到没，都得返回了
    }
    //中序查找
    public HeroNode infixOrderSearch(int no){
        HeroNode resNode = null;
        if (this.left != null) resNode = this.left.infixOrderSearch(no);
        if (resNode != null) return resNode;
        //比较当前节点是不是
        if (this.no == no) return this;
        if (this.right != null) resNode = this.right.infixOrderSearch(no);
        return resNode; //不管最后找到没，都得返回了
    }
    //后序查找
    public HeroNode postOrderSearch(int no){
        HeroNode resNode = null;
        if (this.left != null) resNode = this.left.postOrderSearch(no);
        if (resNode != null) return resNode;
        if (this.right != null) resNode = this.right.postOrderSearch(no);
        if (resNode != null) return resNode; //不管最后找到没，都得返回了
        //比较当前节点是不是
        if (this.no == no) return this;
        return resNode;
    }

    //递归删除
    public void delNode(int no){
        if (this.left != null && this.left.no == no){
            this.left = null;
            return;
        }
        if (this.right != null && this.right.no == no){
            this.right = null;
            return;
        }
        if (this.left != null){
            this.left.delNode(no);
        }
        if (this.right != null){
            this.right.delNode(no);
        }
    }
}

//创建二叉树
class ThreadedBinaryTreeDemo{
    private HeroNode root;
    //为了实现线索化，需要创建给当前节点的前驱节点的指针
    private HeroNode pre = null;

    public ThreadedBinaryTreeDemo(HeroNode root) {
        this.root = root;
    }

    //实现中序线索化
    public void threadedNodes(HeroNode node){
        if (node == null) return;
        //左，当前，右
        threadedNodes(node.getLeft());

        //对于当前节点的处理
        if (node.getLeft() == null){
            //让当前节点的做指针指向前驱节点
            node.setLeft(pre);
            node.setLeftType(1); //指向前驱节点
        }
        if (pre != null && pre.getRight() == null) {
            pre.setRight(node);
            pre.setRightType(1);
        }
        pre = node;

        threadedNodes(node.getRight());
    }


    //前序
    public void preOrder(){
        if (this.root != null){
            this.root.preOrder(); //这样调用之后，preOrder中的this就指向root，因为谁调用，this就指向谁
        }else {
            System.out.println("当前二叉树为空，无法遍历");
        }
    }

    //中序
    public void infixOrder(){
        if (this.root != null){
            this.root.infixOrder(); //这样调用之后，preOrder中的this就指向root，因为谁调用，this就指向谁
        }else {
            System.out.println("当前二叉树为空，无法遍历");
        }
    }

    //后序
    public void postOrder(){
        if (this.root != null){
            this.root.postOrder(); //这样调用之后，preOrder中的this就指向root，因为谁调用，this就指向谁
        }else {
            System.out.println("当前二叉树为空，无法遍历");
        }
    }

    //前序查找
    public HeroNode preOrderSearch(int no){
        if(root != null) return root.preOrderSearch(no);
        else return null;
    }
    //中序遍历
    public HeroNode infixOrderSearch(int no){
        if (root != null) return root.infixOrderSearch(no);
        else return null;
    }
    //后序遍历
    public HeroNode postOrderSearch(int no){
        if (root != null) return root.postOrderSearch(no);
        else return null;
    }
    //删除节点
    public void delNode(int no){
        if (root != null){
            if (root.getNo() == no){
                root = null;
            }else{
                root.delNode(no);
            }
        }else{
            System.out.println("空树，无法删除");
        }
    }
}
