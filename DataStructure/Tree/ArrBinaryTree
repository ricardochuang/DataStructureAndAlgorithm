一般对于完全二叉树，才有顺序存储二叉树
第n个节点的左子节点为 2n + 1， 右子节点为 2n + 2
第n个元素的父节点为(n-1) / 2
n从0开始


package com.zjx.tree;

public class ArrBinaryTreeDemo {
    public static void main(String[] args) {
        int[] arr = {1, 2, 3, 4, 5, 6, 7};
        //创建一个Tree
        ArrBinaryTree arrBinaryTree = new ArrBinaryTree(arr);
        arrBinaryTree.preOrder();
        System.out.println();
        arrBinaryTree.infixOrder(0);
        System.out.println();
        arrBinaryTree.preOrder(0);
    }
}

//编写一个ArrayBinaryTree，实现顺序二叉树遍历
class ArrBinaryTree{
    private int[] arr; //存储数据节点的数组

    public ArrBinaryTree(int[] arr) {
        this.arr = arr;
    }
    //重载preOrder方法
    public void preOrder(){
        this.preOrder(0);
    }
    //编写方法，完成顺序存储二叉树的前序遍历
    /**
     *
     * @param index 数组下标
     */
    public void preOrder(int index){
        if (arr == null || arr.length == 0){
            System.out.println("数组为空，无法遍历");
        }
        //输出当前元素
        System.out.println(arr[index]);
        //向左递归
        if (2 * index + 1 < arr.length) {
            preOrder(2 * index + 1);
        }
        //向右递归
        if (2 * index + 2 < arr.length) {
            preOrder(2 * index + 2);
        }
    }

    public void infixOrder(int index){
        if (arr == null || arr.length == 0){
            System.out.println("数组为空，无法遍历");
        }
        //向左递归
        if (2 * index + 1 < arr.length) {
            infixOrder(2 * index + 1);
        }
        //输出当前元素
        System.out.println(arr[index]);
        //向右递归
        if (2 * index + 2 < arr.length) {
            infixOrder(2 * index + 2);
        }
    }

    public void postOrder(int index){
        if (arr == null || arr.length == 0){
            System.out.println("数组为空，无法遍历");
        }
        //向左递归
        if (2 * index + 1 < arr.length) {
            postOrder(2 * index + 1);
        }
        //向右递归
        if (2 * index + 2 < arr.length) {
            postOrder(2 * index + 2);
        }
        //输出当前元素
        System.out.println(arr[index]);
    }
}
