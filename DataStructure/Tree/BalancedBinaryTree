要不是一颗空树，要不两侧的树的高度差不超过1，且左右子树都是AVL树

构建AVL树

左旋转：（右比左来的高的时候）
1. 创建一个新节点newNode，创建一个新的节点，值等于当前根节点的值
2. 把新节点的左子树设置成当前节点的左子树
3. 把新节点的右子树设置成当前节点的右子树的左子树
4. 把当前节点的值换为右子节点的值
5. 把当前节点的右子树设置成右子树的右子树
6. 把当前节点的左子树设置为新节点

右旋转：（左比右来的高的时候）
1. 创建一个新节点newNode，创建一个新的节点，值等于当前根节点的值
2. 把新节点的右子树设置成当前节点的右子树
3. 把新节点的左子树设置成当前节点的左子树的右子树
4. 把当前节点的值换为左子节点的值
5. 把当前节点的左子树设置成左子树的左子树
6. 把当前节点的右子树设置为新节点

双旋转：左子树的右子树的高度 大于 左子树的左子树高度时
1. 先对这个节点的左节点进行左旋转
2. 然后将当前节点进行右旋转

package com.zjx.avl;

public class AVLTreeDemo {
    public static void main(String[] args) {
//        int[] arr = {4,3,6,5,7,8};
//        int[] arr = {10,12,8,9,7,6};
        int[] arr = {10,11,7,6,8,9};
        AVLTree avlTree = new AVLTree();
        for (int i = 0; i < arr.length; i++) {
            avlTree.add(new Node(arr[i]));
        }
        avlTree.infixOrder();
//        System.out.println("未旋转之前");
        System.out.println("树的高度" + avlTree.getRoot().height());
        System.out.println("左子树的高度" + avlTree.getRoot().leftHeight());
        System.out.println("右子树的高度" + avlTree.getRoot().rightHeight());
    }
}

//节点
class Node {
    int value;
    Node left;
    Node right;

    public Node(int value) {
        this.value = value;
    }

    @Override
    public String toString() {
        return "Node{" +
                "value=" + value +
                '}';
    }

    //返回以当前节点为根节点的树的高度
    public int height() {
        return Math.max(left == null ? 0 : left.height(),
                right == null ? 0 : right.height()) + 1;
    }

    //返回左子树的高度
    public int leftHeight(){
        if (this.left == null) return 0;
        else return this.left.height();
    }

    //返回右子树高度
    public int rightHeight(){
        if (this.right == null) return 0;
        else return this.right.height();
    }

    //左旋
    private void leftRotate(){
        //以当前根节点的值创建新节点
        Node newNode = new Node(this.value);
        //把新节点的左子树设置成当前节点的左子树
        newNode.left = this.left;
        //把新节点的右子树设置成当前节点的右子树的左子树
        newNode.right = this.right.left;
        //把当前节点的值换为右子节点的值
        this.value = this.right.value;
        //把当前节点的右子树设置成右子树的右子树
        this.right = this.right.right;
        //把当前节点的左子树设置为新节点
        this.left = newNode;
    }
    //右旋
    private void rightRotate(){
        //以当前根节点的值创建新节点
        Node newNode = new Node(this.value);
        //把新节点的右子树设置成当前节点的右子树
        newNode.right = this.right;
        //把新节点的左子树设置成当前节点的左子树的右子树
        newNode.left = this.left.right;
        //把当前节点的值换为左子节点的值
        this.value = this.left.value;
        //把当前节点的左子树设置成左子树的左子树
        this.left = this.left.left;
        //把当前节点的右子树设置为新节点
        this.right = newNode;
    }

    //递归添加节点
    public void add(Node node) {
        if (node == null) return;
        //比较传入的节点和当前子树根节点的关系
        if (node.value < this.value) {
            if (this.left == null) {
                this.left = node;
            } else {
                this.left.add(node);
            }
        } else {
            if (this.right == null) {
                this.right = node;
            } else {
                this.right.add(node);
            }
        }
        //做左旋转，此时右子树高度比左子树高度的高超过1
        if (this.rightHeight() - this.leftHeight() > 1){
            //如果右子树的左子树的高度大于右子树的右子树
            if (right != null && right.leftHeight() > right.leftHeight()){
                right.rightRotate();
                leftRotate();
            }else {
                leftRotate();
            }
            return;
        }
        //做右旋转，此时左子树高度比右子树高度的高超过1
        if (this.leftHeight() - this.rightHeight() > 1){
            //左子树的右子树的高度 大于 左子树的左子树高度时
            if (left != null && left.rightHeight() > left.leftHeight()){
                left.leftRotate();
                rightRotate();
            }
            else {
                rightRotate();
            }
        }
    }

    //中序遍历
    public void infixOrder() {
        if (this.left != null) {
            this.left.infixOrder();
        }
        System.out.println(this);
        if (this.right != null) {
            this.right.infixOrder();
        }
    }

    //查找要删除的节点

    /**
     * @param value 要删除的节点的值
     * @return 如果找到，返回该节点，否则返回null
     */
    public Node search(int value) {
        if (value == this.value) return this;
        else if (value < this.value) {
            //向左子树递归查找
            if (this.left == null) return null;
            return this.left.search(value);
        } else {
            //向右子树递归查找
            if (this.right == null) return null;
            return this.right.search(value);
        }
    }

    //查找要删除节点的父节点

    /**
     * @param value 要找到的节点的值
     * @return 返回要删除节点的父节点，如果没有就返回null
     */
    public Node searchParent(int value) {
        if ((this.left != null && this.left.value == value) ||
                (this.right != null && this.right.value == value)) {
            return this;
        } else {
            if (value < this.value && this.left != null) return this.left.searchParent(value);
            else if (value >= this.value && this.right != null) return this.right.searchParent(value);
            else return null;
        }
    }
}

//创建AVL树
class AVLTree {
    private Node root;

    public Node getRoot() {
        return root;
    }

    public void add(Node node) {
        if (root == null) root = node;
        else root.add(node);
    }

    //中序遍历
    public void infixOrder() {
        if (root != null) root.infixOrder();
        else System.out.println("无法遍历");
    }

    //查找要删除的节点
    public Node search(int value){
        if (root == null) return null;
        else return root.search(value);
    }
    //查找父节点
    public Node searchParent(int value){
        if (root == null) return null;
        else return root.searchParent(value);
    }
    //删除节点
    public void delNode(int value){
        if (root == null) return;
        else {
            //先找到要删除的节点
            Node targetNode = search(value);
            if (targetNode == null) return;
            //如果target没有父节点，此时该二叉树只有一个节点
            if (root.left == null && root.right == null){
                root = null;
                return;
            }
            //找targetNode的父节点
            Node parent = searchParent(value);

            //如果是要删除一个叶子节点
            if (targetNode.left == null && targetNode.right == null){
                //判断targetNode是parent的左子节点还是右子节点
                if (parent.left != null && parent.left.value == value) parent.left = null;
                if (parent.right != null && parent.right.value == value) parent.right = null;
            }
            //如果等删除的节点有两个子节点
            else if(targetNode.left != null && targetNode.right != null){
                int minVal = delRightTreeMin(targetNode.right);
                targetNode.value = minVal;
            }
            //如果等删除的节点有一个子节点j
            else {
                //如果要删除的节点有左子节点
                if (targetNode.left != null){
                    if (parent != null){
                        //如果targetNode是parent的左子节点
                        if (parent.left.value == value) parent.left = targetNode.left;
                        else parent.right = targetNode.left;
                    }
                    else root = targetNode.left;
                }
                else { //要删除的节点有右子节点
                    if (parent != null){
                        if (parent.left.value == value) parent.left = targetNode.right;
                        else parent.right = targetNode.right;
                    }
                    else root = targetNode.right;
                }
            }
        }
    }

    /**
     * 1. 返回最小数
     * 2. 删除node为根节点的二叉排序树
     * @param node 传入的节点（当作二叉排序树的根节点）
     * @return 返回的是以node为根节点的二叉排序树的最小节点的值
     */
    public int delRightTreeMin(Node node){
        Node target = node;
        //循环查找左节点，就能找到最小值
        while (target.left != null){
            target = target.left;
        }
        //while之后，target就指向最小节点
        //删除最小节点
        delNode(target.value);
        return target.value;
    }
}
