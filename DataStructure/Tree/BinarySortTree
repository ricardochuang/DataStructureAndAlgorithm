二叉排序树
左子节点比当前节点小，右子节点比当前节点大
二叉树的创建
package com.zjx.binarysorttree;

public class BinarySortTreeDemo {
    public static void main(String[] args) {
        int[] arr = {7, 3, 10, 12, 5, 1, 9};
        BinaryTree binaryTree = new BinaryTree();
        //循环添加节点
        for (int i = 0; i < arr.length; i++) {
            binaryTree.add(new Node(arr[i]));
        }
        binaryTree.infixOrder();
    }
}

//节点
class Node {
    int value;
    Node left;
    Node right;

    public Node(int value) {
        this.value = value;
    }

    @Override
    public String toString() {
        return "Node{" +
                "value=" + value +
                '}';
    }

    //递归添加节点
    public void add(Node node) {
        if (node == null) return;
        //比较传入的节点和当前子树根节点的关系
        if (node.value < this.value) {
            if (this.left == null) {
                this.left = node;
            } else {
                this.left.add(node);
            }
        } else {
            if (this.right == null) {
                this.right = node;
            } else {
                this.right.add(node);
            }
        }
    }

    //中序遍历
    public void infixOrder() {
        if (this.left != null) {
            this.left.infixOrder();
        }
        System.out.println(this);
        if (this.right != null) {
            this.right.infixOrder();
        }
    }
}

//创建树
class BinaryTree {
    private Node root;

    public void add(Node node) {
        if (root == null) root = node;
        else root.add(node);
    }

    //中序遍历
    public void infixOrder() {
        if (root != null) root.infixOrder();
        else System.out.println("无法遍历");
    }
}
