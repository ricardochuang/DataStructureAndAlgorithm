java程序 -- 缓存层 -- 数据库

用hashtable管理雇员信息

hashTable: 数组 + 链表

package com.zjx.hashtable;

import java.util.Scanner;

public class HashTabDemo {
    public static void main(String[] args) {
        //创建HashTable
        HashTable hashTable = new HashTable(7);
        //菜单
        String key ="";
        Scanner scanner = new Scanner(System.in);
        while (true){
            System.out.println("add, 添加");
            System.out.println("list, 显示");
            System.out.println("find, 查找");
            System.out.println("del, 删除");
            System.out.println("exit, 退出");

            key = scanner.next();

            switch (key){
                case "add":
                    System.out.println("输入用户id");
                    int id = scanner.nextInt();
                    System.out.println("输入用户名字");
                    String name = scanner.next();
                    //创建雇员
                    Emp emp = new Emp(id, name);
                    hashTable.add(emp);
                    break;
                case "list":
                    hashTable.list();
                    break;
                case "find":
                    System.out.println("输入要查找的id");
                    int id2 = scanner.nextInt();
                    hashTable.findEmpById(id2);
                    break;
                case "del":
                    System.out.println("输入要删除的id");
                    int id3 = scanner.nextInt();
                    hashTable.deEmpById(id3);
                    break;
                case "exit":
                    scanner.close();
                    System.exit(0);
                    break;
            }
        }
    }
}

//创建HashTable
class HashTable{
    private EmpLinkedList[] empLinkedListArray;
    private int size; //表示有多少链表

    public HashTable(int size) {
        this.size = size;
        empLinkedListArray = new EmpLinkedList[size];
        //不要忘了初始化每一个链表
        for (int i = 0; i < size; i++) {
            empLinkedListArray[i] = new EmpLinkedList();
        }
    }
    //添加雇员
    public void add(Emp emp){
        //根据员工的id，得到该员工应当添加到哪一条链表
        int empLinkedListNO = hashFun(emp.id);
        //将emp添加到对应的链表中
        empLinkedListArray[empLinkedListNO].add(emp);
    }
    //遍历所有链表
    public void list(){
        for (int i = 0; i < size; i++) {
            empLinkedListArray[i].list(i);
        }
    }
    //编写散列函数
    public int hashFun(int id){
        return id % size;
    }
    //根据输入的id查找雇员
    public void findEmpById(int id){
        //使用散列确定去那一条链表查找
        int empLinkedListNO = hashFun(id);
        Emp emp = empLinkedListArray[empLinkedListNO].findEmpById(id);
        if (emp != null){ //找到
            System.out.printf("在第%d条链表中找到编号为%d的雇员\n", (empLinkedListNO + 1), id);
        }else {
            System.out.println("在哈希表中没有找到该雇员");
        }
    }
    //根据id删除
    public void deEmpById(int id){
        int empLinkedListNO = hashFun(id);
        empLinkedListArray[empLinkedListNO].del(id);
    }
}

//表示一个雇员
class Emp {
    public int id;
    public String name;
    public Emp next; //默认为空
    public Emp(int id, String name){
        this.id = id;
        this.name = name;
    }
}

//创建EmpLinkedList,表示链表
class EmpLinkedList{
    //头指针，头指针就是第一个Emp
    private Emp head;

    //添加雇员到链表，假定添加雇员时，id自增
    public void add(Emp emp){
        //如果是第一个雇员
        if (head == null){
            head = emp;
            return;
        }
        //如果不是第一个雇员，则使用一个辅助指针，帮助添加到最后
        Emp curEmp = head;
        while (true){
            if (curEmp.next == null) break;
            curEmp = curEmp.next; //后移
        }
        //退出后加入新的雇员
        curEmp.next = emp;
    }

    //遍历
    public void list(int no){
        if (head == null){
            System.out.println("第"+ (no + 1) + "链表为空");
            return;
        }
        System.out.println("第"+ (no + 1) + "链表信息为");
        Emp curEmp = head;
        while (true){
            System.out.printf("=> id = %d name = %s \t", curEmp.id, curEmp.name);
            if (curEmp.next == null) break;
            curEmp = curEmp.next;
        }
        System.out.println();
    }

    //根据id查找雇员
    //如果查找到就返回emp，找不到就返回null
    public Emp findEmpById(int id){
        //判断链表是否为空
        if (head == null){
            System.out.println("链表为空");
            return null;
        }
        Emp curEmp = head;
        while (true){
            if (curEmp.id == id){
                break;
            }
            if (curEmp.next == null){
                curEmp = null; //因为没找到要返回null，可以直接将curEmp置为null
                break;
            }
            curEmp = curEmp.next; //后移
        }
        return curEmp;
    }

    //删除
    public void del(int id){
        if (head == null){
            System.out.println("链表为空，无法删除");
            return;
        }
        if (head.id == id){
            head = head.next;
            return;
        }
        Emp curEmp = head;
        boolean loop = false; //标志是否找到
        while (true){
            if (curEmp == null) break;
            if (curEmp.next.id == id){
                loop = true;
                break;
            }
            curEmp = curEmp.next;
        }
        if (!loop) System.out.println("未找到要删除的雇员");
        else {
            curEmp.next = curEmp.next.next;
        }
    }
}
