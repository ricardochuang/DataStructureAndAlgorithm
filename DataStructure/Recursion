1. 当程序执行到一个方法时，就会开辟一个独立的空间（栈）
2. 每个空间的数据（局部变量）是独立的

package com.zjx.recursion;

public class RecursionTest {
    public static void main(String[] args) {
        //递归的调用机制
//        test(4);
        int res = factorial(3);
        System.out.println(res);
    }

    public static void test(int n){
        if (n > 2){
            test(n - 1);
        }
        System.out.println("n= " + n);
    }
    //阶乘问题
    public static int factorial(int n){
        if(n == 1) return 1;
        else return factorial(n - 1) * n;
    }
}

迷宫问题
package com.zjx.recursion;

public class Labyrinth {
    public static void main(String[] args) {
        //用二维数组模拟迷宫
        int[][] map = new int[8][7];
        //1：墙体
        //上下置为1
        for (int i = 0; i < 7; ++i) {
            map[0][i] = 1;
            map[7][i] = 1;
        }
        //左右置为1
        for (int i = 0; i < 8; i++) {
            map[i][0] = 1;
            map[i][6] = 1;
        }
        //设置挡板
        map[3][1] = 1;
        map[3][2] = 1;

        System.out.println("当前地图的情况——————————");
        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 7; j++) {
                System.out.print(map[i][j] + " ");
            }
            System.out.println();
        }
        //使用递归回溯给小球找路
//        setWay(map, 1, 1);
        setWay2(map, 1, 1);
        //输出新的地图
        System.out.println("小球走过后——————————");
        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 7; j++) {
                System.out.print(map[i][j] + " ");
            }
            System.out.println();
        }
    }

    //使用递归回溯给小球找路
    /**
     * @param map 传入一个地图
     * @param i   初始位置
     * @param j   初始位置
     * @return 是否找到[6][5]
     * 当i j为0，表示还没尝试过，1表示墙体，2表示可以走，3表示已经走过，但是走不通
     * 在走迷宫钱，需要确定一个策略：下 -> 右 -> 上 -> 左，走不通再回溯
     */
    public static boolean setWay(int[][] map, int i, int j) {
        if (map[6][5] == 2) return true;
        else {
            if (map[i][j] == 0) {//如果当前这个点还没有走过
                map[i][j] = 2; //假定该点可以走通
                if (setWay(map, i + 1, j)) return true; //向下走
                else if (setWay(map, i, j + 1)) return true; //向右走
                else if (setWay(map, i - 1, j)) return true; //向上走
                else if (setWay(map, i, j - 1)) return true; //向左走
                else {
                    map[i][j] = 3; //四个方向都走不通，说明现在是死路
                    return false;
                }
            } else { //如果map[i][j] ！= 0， 可能是1（墙体） 2（已经走过） 3（死路）
                return false;
            }
        }
    }

    //获取最短路径的方法：改变策略，上 -> 右 -> 下 -> 左
    public static boolean setWay2(int[][] map, int i, int j) {
        if (map[6][5] == 2) return true;
        else {
            if (map[i][j] == 0) {//如果当前这个点还没有走过
                map[i][j] = 2; //假定该点可以走通
                if (setWay2(map, i - 1, j)) return true; //向上走
                else if (setWay2(map, i, j + 1)) return true; //向右走
                else if (setWay2(map, i + 1, j)) return true; //向下走
                else if (setWay2(map, i, j - 1)) return true; //向左走
                else {
                    map[i][j] = 3; //四个方向都走不通，说明现在是死路
                    return false;
                }
            } else { //如果map[i][j] ！= 0， 可能是1（墙体） 2（已经走过） 3（死路）
                return false;
            }
        }
    }
}


八皇后问题
1. 第一个皇后放在第一行，第一列
2. 第二个皇后放在第二行，第二列，然后判断是否正确，如果不正确就放在第二行的第二列，第三列，直到找到一个合适的位置
3. 继续第三个皇后，重复上述放置方法，直到第八个皇后放置在一个不冲突的位置
4. 得到一个正确解之后，回退到上一个栈，开始回溯。换倒数第二个的位置，开始动最后一个
5. 重复回溯，变第一个的位置，再做2，3，4

理论上需要用二维数组表示棋盘，但是可以用一个一维数组解决 arr[8] = {0, 4, 7, 5, 2, 6, 1, 3}，其中arr的下标表示第几行，数组中的数字表示第几列 arr[7] == 3: 第8个皇后在第8行，第4列 

package com.zjx.recursion;

public class Queen8 {
    //先定义一个max,表示有多少皇后
    int max = 8;
    //定义数组array,保存皇后位置的结果,比如arr = {0, 4, 7, 5, 2, 6, 1, 3}
    int[] array = new int[max];
    static int count = 0;
    public static void main(String[] args) {
        Queen8 queen8 = new Queen8();
        queen8.check(0);
        System.out.printf("共有%d种解法", count);
    }

    //写一个方法,将皇后摆放的位置输出
    private void print(){
        count++;
        for (int j : array) {
            System.out.print(j + " ");
        }
        System.out.println();
    }

    //判断放置第n个皇后的时候,该皇后是否和已经摆放的皇后冲突
    private boolean judge(int n){
        for (int i = 0; i < n; i++) {
            if (array[i] == array[n] || Math.abs(n - i) == Math.abs(array[n] - array[i]) ){
                //     同一列                           同一斜线(斜率为1)
                //注意,此时不用判断是否在同一行,因为n在递增
                return false;
            }
        }
        return true;
    }

    //放置第n个皇后
    //注意到调用check的时候,在第一个for没有走完,就开始了第二次check,因此存在回溯
    private void check(int n){
        if (n == max){
            //说明前8个皇后已经放好
            print();
            return;
        }
        //依次放入皇后,并判断是否冲突
        for (int i = 0; i < max; i++) {
            //先把当前皇后n放到该行的第一列
            array[n] = i;
            //判断是否冲突
            if (judge(n)){ //不冲突
                //放置第n+1个皇后,开始递归
                check(n + 1);
            }
            //如果冲突,就继续执行array[n] = i; 本行的后移位置
        }

    }

}
