1. 当程序执行到一个方法时，就会开辟一个独立的空间（栈）
2. 每个空间的数据（局部变量）是独立的

package com.zjx.recursion;

public class RecursionTest {
    public static void main(String[] args) {
        //递归的调用机制
//        test(4);
        int res = factorial(3);
        System.out.println(res);
    }

    public static void test(int n){
        if (n > 2){
            test(n - 1);
        }
        System.out.println("n= " + n);
    }
    //阶乘问题
    public static int factorial(int n){
        if(n == 1) return 1;
        else return factorial(n - 1) * n;
    }
}

迷宫问题
package com.zjx.recursion;

public class Labyrinth {
    public static void main(String[] args) {
        //用二维数组模拟迷宫
        int[][] map = new int[8][7];
        //1：墙体
        //上下置为1
        for (int i = 0; i < 7; ++i) {
            map[0][i] = 1;
            map[7][i] = 1;
        }
        //左右置为1
        for (int i = 0; i < 8; i++) {
            map[i][0] = 1;
            map[i][6] = 1;
        }
        //设置挡板
        map[3][1] = 1;
        map[3][2] = 1;

        System.out.println("当前地图的情况——————————");
        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 7; j++) {
                System.out.print(map[i][j] + " ");
            }
            System.out.println();
        }
        //使用递归回溯给小球找路
//        setWay(map, 1, 1);
        setWay2(map, 1, 1);
        //输出新的地图
        System.out.println("小球走过后——————————");
        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 7; j++) {
                System.out.print(map[i][j] + " ");
            }
            System.out.println();
        }
    }

    //使用递归回溯给小球找路
    /**
     * @param map 传入一个地图
     * @param i   初始位置
     * @param j   初始位置
     * @return 是否找到[6][5]
     * 当i j为0，表示还没尝试过，1表示墙体，2表示可以走，3表示已经走过，但是走不通
     * 在走迷宫钱，需要确定一个策略：下 -> 右 -> 上 -> 左，走不通再回溯
     */
    public static boolean setWay(int[][] map, int i, int j) {
        if (map[6][5] == 2) return true;
        else {
            if (map[i][j] == 0) {//如果当前这个点还没有走过
                map[i][j] = 2; //假定该点可以走通
                if (setWay(map, i + 1, j)) return true; //向下走
                else if (setWay(map, i, j + 1)) return true; //向右走
                else if (setWay(map, i - 1, j)) return true; //向上走
                else if (setWay(map, i, j - 1)) return true; //向左走
                else {
                    map[i][j] = 3; //四个方向都走不通，说明现在是死路
                    return false;
                }
            } else { //如果map[i][j] ！= 0， 可能是1（墙体） 2（已经走过） 3（死路）
                return false;
            }
        }
    }

    //获取最短路径的方法：改变策略，上 -> 右 -> 下 -> 左
    public static boolean setWay2(int[][] map, int i, int j) {
        if (map[6][5] == 2) return true;
        else {
            if (map[i][j] == 0) {//如果当前这个点还没有走过
                map[i][j] = 2; //假定该点可以走通
                if (setWay2(map, i - 1, j)) return true; //向上走
                else if (setWay2(map, i, j + 1)) return true; //向右走
                else if (setWay2(map, i + 1, j)) return true; //向下走
                else if (setWay2(map, i, j - 1)) return true; //向左走
                else {
                    map[i][j] = 3; //四个方向都走不通，说明现在是死路
                    return false;
                }
            } else { //如果map[i][j] ！= 0， 可能是1（墙体） 2（已经走过） 3（死路）
                return false;
            }
        }
    }
}
