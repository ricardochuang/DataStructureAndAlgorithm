数组模拟队列

package com.zjx.queue;

import java.util.Scanner;

public class ArrayQueueDemo {
    public static void main(String[] args) {
        //创建队列
        ArrayQueue arrayQueue = new ArrayQueue(3);
        char key = ' '; //接受用户输入
        Scanner scanner = new Scanner(System.in);
        boolean loop = true;
        while(loop){
            System.out.println("s,显示队列");
            System.out.println("e,退出");
            System.out.println("a,添加");
            System.out.println("g,取出");
            System.out.println("h,查看队列头数据");
            key = scanner.next().charAt(0); //接受字符
            switch (key){
                case 's':
                    arrayQueue.showQueue();
                    break;
                case 'a':
                    try{
                        System.out.println("请输入一个数：");
                        int value = scanner.nextInt();
                        arrayQueue.addQueue(value);
                    }catch (Exception e){
                        System.out.println(e.getMessage());
                    }
                    break;
                case 'g':
                    try {
                        int res = arrayQueue.getQueue();
                        System.out.printf("取出的数据是%d\n", res);
                    }catch (Exception e){
                        System.out.println(e.getMessage());
                    }
                    break;
                case 'h':
                    try {
                        int res = arrayQueue.headQueue();
                        System.out.printf("队列头的数据是%d\n", res);
                    } catch (Exception e){
                        System.out.println(e.getMessage());
                    }
                    break;
                case 'e':
                    scanner.close();
                    loop = false;
                    break;
            }
        }
        System.out.println("程序退出");
    }
}

//使用数组模拟队列：编写ArrayQueue类
class ArrayQueue{
    private int maxSize; //队列最大容量
    private int front; //队列头
    private int rear; //队列尾
    private int[] arr; //用来模拟队列的数组

    //构造器
    public ArrayQueue(int arrMaxSize){
        maxSize = arrMaxSize;
        arr = new int[maxSize];
        front = -1; //指向队列头的前一个位置
        rear = -1; //指向队列尾
    }

    //判断队列是否已满
    public boolean isFull(){
        return rear == maxSize - 1;
    }

    //判断队列是否为空
    public boolean isEmpty(){
        return rear == front;
    }

    //添加数据到队列
    public void addQueue(int n){
        if(isFull()){
            throw new RuntimeException("队列满了，不能添加");
        }
        rear++; //让rear后移
        arr[rear] = n;
    }

    //获取数据（出队列）
    public int getQueue(){
        if(isEmpty()){
            throw new RuntimeException("队列为空");
        }
        front ++; //front后移
        return arr[front];
    }

    //显示队列所有数据
    public void showQueue(){
        if(isEmpty()){
            System.out.println("队列为空，没有数据");
            return;
        }
        for(int i = 0; i < arr.length; ++i){
            System.out.printf("arr[%d]=%d\n", i, arr[i]);
        }
    }

    //显示队列头
    public int headQueue(){
        if(isEmpty()){
            throw new RuntimeException("队列为空");
        }
        return arr[front + 1];
    }
}

环形数组
思路： 
1. front变量的含义的调整： front指向第一个元素，初始值为0
2. rear变量含义的调整：rear指向后一个元素的后一个位置，从而得到一个富裕的空间，初始值为0
3. 队列满的条件: (rear + 1) % maxSize = front
4. 队列空的条件： rear == front
5. 此时有效的个数： (rear + maxSize - front) % maxSize

package com.zjx.queue;

import java.util.Scanner;

public class CircleArrayQueueDemo {
    public static void main(String[] args) {
        //创建队列
        CircleArray arrayQueue = new CircleArray(4);
        char key = ' '; //接受用户输入
        Scanner scanner = new Scanner(System.in);
        boolean loop = true;
        while(loop){
            System.out.println("s,显示队列");
            System.out.println("e,退出");
            System.out.println("a,添加");
            System.out.println("g,取出");
            System.out.println("h,查看队列头数据");
            key = scanner.next().charAt(0); //接受字符
            switch (key){
                case 's':
                    arrayQueue.showQueue();
                    break;
                case 'a':
                    try{
                        System.out.println("请输入一个数：");
                        int value = scanner.nextInt();
                        arrayQueue.addQueue(value);
                    }catch (Exception e){
                        System.out.println(e.getMessage());
                    }
                    break;
                case 'g':
                    try {
                        int res = arrayQueue.getQueue();
                        System.out.printf("取出的数据是%d\n", res);
                    }catch (Exception e){
                        System.out.println(e.getMessage());
                    }
                    break;
                case 'h':
                    try {
                        int res = arrayQueue.headQueue();
                        System.out.printf("队列头的数据是%d\n", res);
                    } catch (Exception e){
                        System.out.println(e.getMessage());
                    }
                    break;
                case 'e':
                    scanner.close();
                    loop = false;
                    break;
            }
        }
        System.out.println("程序退出");
    }
}
class CircleArray{
    private int maxSize; //队列最大容量
    private int front; //队列头
    private int rear; //队列尾
    private int[] arr; //用来模拟队列的数组

    public CircleArray(int arrMaxSize){
        maxSize = arrMaxSize;
        arr = new int[maxSize];
        front = 0;
        rear = 0;
    }

    //判断队列是否已满
    public boolean isFull(){
        return (rear + 1) % maxSize == front;
    }

    //判断队列是否为空
    public boolean isEmpty(){
        return rear == front;
    }

    //添加数据到队列
    public void addQueue(int n){
        if(isFull()){
            throw new RuntimeException("队列满了，不能添加");
        }
        arr[rear] = n;
        rear = (rear + 1 ) % maxSize; //让rear后移，记得取模
    }

    //获取数据（出队列）
    public int getQueue(){
        if(isEmpty()){
            throw new RuntimeException("队列为空");
        }
        int value = arr[front];
        front = (front + 1) % maxSize;
        return value;
    }

    //显示队列所有数据
    public void showQueue(){
        if(isEmpty()){
            System.out.println("队列为空，没有数据");
            return;
        }
        //从front开始遍历，遍历所有元素
        for(int i = front; i < front + size(); ++i){
            System.out.printf("arr[%d]=%d\n", i % maxSize, arr[i % maxSize]);
        }
    }

    //求有效数据个数
    public int size(){
        return (rear + maxSize - front) % maxSize;
    }

    //显示队列头
    public int headQueue(){
        if(isEmpty()){
            throw new RuntimeException("队列为空");
        }
        return arr[front];
    }
}


