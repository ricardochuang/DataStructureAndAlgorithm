分治的思想

84571362
分： 8457  1362 
分： 84 57 13 62
分： 8 4 5 7 1 3 6 2
治： 48 57 13 26
治： 4578 1236
治： 12345678

package com.zjx.sort;

import java.util.Arrays;

public class MergeSort {
    public static void main(String[] args) {
        int arr[] = {8, 4, 5, 7, 1, 3, 6, 2};
        int temp[] = new int[arr.length];
        mergeSort(arr, 0, arr.length - 1, temp);
        System.out.println(Arrays.toString(arr));
    }

    /**
     * 合并的方法
     * @param arr 待排序的原始数组
     * @param left 左边有序序列的初始索引
     * @param mid 中间索引
     * @param right 右边索引
     * @param temp 中转数组
     */
    public static void merge(int[] arr, int left, int mid, int right, int[] temp){
        int i = left; //初始化i，为左边的初始
        int j = mid + 1; //j为右边的初始
        int t = 0; //指向temp的当前索引

        //先把左右两边的数据按照规则填充到temp数组
        //直到所有两边的有序数列有一方处理完毕为止
        while (i <= mid && j <= right){
            if (arr[i] <= arr[j]){
                temp[t] = arr[i];
                t++;
                i++;
            } else {
                temp[t] = arr[j];
                t++;
                j++;
            }
        }

        //把有剩余数据的一方全部填充到temp
        while (i <= mid){ //左边还有剩余，要把左边填充
            temp[t] = arr[i];
            t++;
            i++;
        }
        while (j <= right){ //左边还有剩余，要把左边填充
            temp[t] = arr[j];
            t++;
            j++;
        }

        //将temp元素拷贝到arr
        //注意每次拷贝是长度不同
        t = 0;
        int tempLeft = left;
        while (tempLeft <= right){
            arr[tempLeft] = temp[t];
            t++;
            tempLeft++;
        }
    }

    //分解+合并
    public static void mergeSort(int[] arr, int left, int right, int[] temp){
        if (left < right){
            int mid = (left + right) / 2; //找到中间索引
            //向左递归
             mergeSort(arr, left, mid, temp);
             //向右递归
            mergeSort(arr, mid + 1, right, temp);
            // 到合并
            merge(arr, left, mid, right, temp);
        }
    }
}
