对于冒泡排序的改进
思路分析：
-9, 78, 0, 23, -567, 70
（脚标一共到5，取中间为2，即使用“0”作为标准）
从0的左边找到一个比0大的数，右边找到一个比0小的数字，然后交换，得到 -9, -567, 0, 23, 78, 70
然后向左递归：-567， -9
向右递归： 23 70 78

package com.zjx.sort;

import java.util.Arrays;

public class QuickSort {
    public static void main(String[] args) {
        int arr[] =  {-9,78,0, 23, -567, 70};
        quickSort(arr, 0, arr.length - 1);
        System.out.println(Arrays.toString(arr));
    }
    public static void quickSort(int[] arr, int left, int right){
        int l = left; //左下标
        int r = right; //右下标
        int pivot = arr[(left + right) / 2]; //中轴
        int temp = 0; //临时变量，作为交换时使用

        //while循环的目的是让比pivot小的值放到左边，大的值放到右边
        while ( l < r){
            //在pivot的左边一直找，找到大于等于pivot的值，才退出
            while (arr[l] < pivot){
                l += 1;
            }
            //在pivot的右边一直找，找到小于等于pivot的值，才退出
            while (arr[r] > pivot){
                r -= 1;
            }
            //左都是小于p，右都是大于p，则
            if(l >= r){
                break;
            }

            //交换
            temp = arr[l];
            arr[l] = arr[r];
            arr[r] = temp;

            //如果交换完后，发现arr[l] == pivot
            if(arr[l] == pivot) r -= 1;

            if(arr[r] == pivot) l += 1;
        }

        if (l == r){
            l += 1;
            r -= 1;
        }

        //向左递归
        if (left < r){
            quickSort(arr, left, r);
        }

        //向右递归
        if (right > l){
            quickSort(arr, l, right);
        }


    }
}

进行时间测试
package com.zjx.sort;

import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;

public class QuickSort {
    public static void main(String[] args) {
//        int arr[] =  {-9,78,0, 23, -567, 70};
//        quickSort(arr, 0, arr.length - 1);
//        System.out.println(Arrays.toString(arr));

        int arr[] = new int[80000];
        for (int i = 0; i < 80000; i++) {
            arr[i] = (int) (Math.random() * 800000); //[0, 800000)
        }
        //测试时间
        Date date = new Date();
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        String date1Str = simpleDateFormat.format(date);
        System.out.println("排序前的时间是" + date1Str);

        quickSort(arr, 0, arr.length - 1);

        Date date2 = new Date();
        String date2Str = simpleDateFormat.format(date2);
        System.out.println("排序后的时间是" + date2Str);


    }
    public static void quickSort(int[] arr, int left, int right){
        int l = left; //左下标
        int r = right; //右下标
        int pivot = arr[(left + right) / 2]; //中轴
        int temp = 0; //临时变量，作为交换时使用

        //while循环的目的是让比pivot小的值放到左边，大的值放到右边
        while ( l < r){
            //在pivot的左边一直找，找到大于等于pivot的值，才退出
            while (arr[l] < pivot){
                l += 1;
            }
            //在pivot的右边一直找，找到小于等于pivot的值，才退出
            while (arr[r] > pivot){
                r -= 1;
            }
            //左都是小于p，右都是大于p，则
            if(l >= r){
                break;
            }

            //交换
            temp = arr[l];
            arr[l] = arr[r];
            arr[r] = temp;

            //如果交换完后，发现arr[l] == pivot
            if(arr[l] == pivot) r -= 1;

            if(arr[r] == pivot) l += 1;
        }

        if (l == r){
            l += 1;
            r -= 1;
        }

        //向左递归
        if (left < r){
            quickSort(arr, left, r);
        }

        //向右递归
        if (right > l){
            quickSort(arr, l, right);
        }


    }
}

时间不到1s，且比shell还快

