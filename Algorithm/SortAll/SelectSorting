从数组中找到最小的，与第一个发生交换（放到第一个）。
每次都找到最小的，放到最前面

思路图解
原始数组： 101， 34， 119， 1
第一轮排序： 1， 34， 119， 101
第二轮排序： 1， 34， 119， 101
第三轮排序： 1， 34， 101， 119

1. 选择排序一共有 数组大小-1轮排序
2. 每一轮排序又是一个循环：
2.1 先假定当前数字是最小数
2.2 和后面的其他数进行比较，如果发现或更小的，得到下标
2.3 与第一个进行交换

package com.zjx.sort;

import java.util.Arrays;

public class SelectSort {
    public static void main(String[] args) {
        int arr[] = {101, 34, 119, 1};
        selectSort(arr);
        System.out.println("排序后----");
        System.out.println(Arrays.toString(arr));
    }
    //选择排序
    public static void selectSort(int arr[]){
        for (int i = 0; i < arr.length - 1; i++) {
            int minIndex = i;
            int min = arr[i];
            for (int j = i + 1; j < arr.length; ++j){
                if (min > arr[j]){
                    min = arr[j]; //重置min
                    minIndex = j;
                }
            }
            //交换
            if (minIndex != i){
                arr[minIndex] = arr[i];
                arr[i] = min;
            }
//            System.out.printf("第%d轮后----", i + 1);
//            System.out.println(Arrays.toString(arr));
            
        }
        //第一轮，找到最小的，放到第一个
//        int minIndex = 0;
//        int min = arr[0];
//        for (int j = 1; j < arr.length; ++j){
//            if (min > arr[j]){
//                min = arr[j]; //重置min
//                minIndex = j;
//            }
//        }
//        //交换
//        if (minIndex != 0){
//            arr[minIndex] = arr[0];
//            arr[0] = min;
//        }
//        System.out.println("第一轮后----");
//        System.out.println(Arrays.toString(arr));
//
//        //第二轮，找到最小的，放到第二个
//        minIndex = 1;
//        min = arr[1];
//        for (int j = 2; j < arr.length; ++j){
//            if (min > arr[j]){
//                min = arr[j]; //重置min
//                minIndex = j;
//            }
//        }
//        //交换
//        if (minIndex != 1){
//            arr[minIndex] = arr[1];
//            arr[1] = min;
//        }
//        System.out.println("第二轮后----");
//        System.out.println(Arrays.toString(arr));
//
//        //第三轮，找到最小的，放到第三个
//        minIndex = 2;
//        min = arr[2];
//        for (int j = 3; j < arr.length; ++j){
//            if (min > arr[j]){
//                min = arr[j]; //重置min
//                minIndex = j;
//            }
//        }
//        //交换
//        if (minIndex != 2){
//            arr[minIndex] = arr[2];
//            arr[2] = min;
//        }
//        System.out.println("第三轮后----");
//        System.out.println(Arrays.toString(arr));
    }
}


package com.zjx.sort;

import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;

public class SelectSort {
    public static void main(String[] args) {
//        int arr[] = {101, 34, 119, 1};
        int arr[] = new int[80000];
        for (int i = 0; i < 80000; i++) {
            arr[i] = (int) (Math.random() * 800000); //[0, 800000)
        }
        //测试时间
        Date date = new Date();
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        String date1Str = simpleDateFormat.format(date);
        System.out.println("排序前的时间是" + date1Str);

        selectSort(arr);

        Date date2 = new Date();
        String date2Str = simpleDateFormat.format(date2);
        System.out.println("排序后的时间是" + date2Str);
//        System.out.println("排序后----");
//        System.out.println(Arrays.toString(arr));
    }
    //选择排序
    public static void selectSort(int arr[]){
        for (int i = 0; i < arr.length - 1; i++) {
            int minIndex = i;
            int min = arr[i];
            for (int j = i + 1; j < arr.length; ++j){
                if (min > arr[j]){
                    min = arr[j]; //重置min
                    minIndex = j;
                }
            }
            //交换
            if (minIndex != i){
                arr[minIndex] = arr[i];
                arr[i] = min;
            }
//            System.out.printf("第%d轮后----", i + 1);
//            System.out.println(Arrays.toString(arr));
            
        }
        //第一轮，找到最小的，放到第一个
//        int minIndex = 0;
//        int min = arr[0];
//        for (int j = 1; j < arr.length; ++j){
//            if (min > arr[j]){
//                min = arr[j]; //重置min
//                minIndex = j;
//            }
//        }
//        //交换
//        if (minIndex != 0){
//            arr[minIndex] = arr[0];
//            arr[0] = min;
//        }
//        System.out.println("第一轮后----");
//        System.out.println(Arrays.toString(arr));
//
//        //第二轮，找到最小的，放到第二个
//        minIndex = 1;
//        min = arr[1];
//        for (int j = 2; j < arr.length; ++j){
//            if (min > arr[j]){
//                min = arr[j]; //重置min
//                minIndex = j;
//            }
//        }
//        //交换
//        if (minIndex != 1){
//            arr[minIndex] = arr[1];
//            arr[1] = min;
//        }
//        System.out.println("第二轮后----");
//        System.out.println(Arrays.toString(arr));
//
//        //第三轮，找到最小的，放到第三个
//        minIndex = 2;
//        min = arr[2];
//        for (int j = 3; j < arr.length; ++j){
//            if (min > arr[j]){
//                min = arr[j]; //重置min
//                minIndex = j;
//            }
//        }
//        //交换
//        if (minIndex != 2){
//            arr[minIndex] = arr[2];
//            arr[2] = min;
//        }
//        System.out.println("第三轮后----");
//        System.out.println(Arrays.toString(arr));
    }
}

测试时间后发现，select sort比bubble sort用时短

