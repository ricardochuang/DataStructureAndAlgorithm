将所有待比较数值统一为同样的位数长度，位数短的前面补0。
然后从最低位开始，依次进行排序。这样从最低位排序一直到最高位排序完成之后，就得到一个有序序列。

第一轮：将个位数取出，看这个数应该放到哪个桶中。按照桶的顺序取出数据，放回原来的数组
第二轮：在第一轮的基础上，将十位取出
...

package com.zjx.sort;

import java.util.Arrays;

public class RadixSort {
    public static void main(String[] args) {
        int arr[] = {53, 3, 542, 748, 14, 214};
        radixSort(arr);
    }

    public static void radixSort(int arr[]){
        //每个桶其实是一个一维数组，整体是一个二位数组
        //空间换时间
        int[][] bucket = new int[10][arr.length];

        //为了记录每个桶中实际存放了多少数据，我们定义一个一维数组来记录每个桶放入的数据个数
        int[] bucketElementCounts = new int[10];

//        //第一轮，针对个位
//        for (int j = 0; j < arr.length; ++j){
//            //取各位
//            int digitOfElement = arr[j] % 10;
//            bucket[digitOfElement][bucketElementCounts[digitOfElement]] = arr[j];
//            bucketElementCounts[digitOfElement]++;
//        }
//        //按照桶的顺序取出
//        int index = 0;
//        //遍历每一个桶，并将桶中的每一个数据放回原数组
//        for (int k = 0; k < bucketElementCounts.length; k++){
//            //如果桶中有数据，我们才放入到原数组
//            if (bucketElementCounts[k] != 0){
//                //循环该桶，将数据放入
//                for (int l = 0; l < bucketElementCounts[k]; l++ ){
//                    //取出元素，放入arr
//                    arr[index] = bucket[k][l];
//                    index++;
//                }
//            }
//
//            bucketElementCounts[k] = 0;
//        }
//        System.out.println(Arrays.toString(arr));
//
//        //第二轮，针对十位
//        for (int j = 0; j < arr.length; ++j){
//            //取各位
//            int digitOfElement = arr[j] / 10 % 10;
//            bucket[digitOfElement][bucketElementCounts[digitOfElement]] = arr[j];
//            bucketElementCounts[digitOfElement]++;
//        }
//        //按照桶的顺序取出
//        index = 0;
//        //遍历每一个桶，并将桶中的每一个数据放回原数组
//        for (int k = 0; k < bucketElementCounts.length; k++){
//            //如果桶中有数据，我们才放入到原数组
//            if (bucketElementCounts[k] != 0){
//                //循环该桶，将数据放入
//                for (int l = 0; l < bucketElementCounts[k]; l++ ){
//                    //取出元素，放入arr
//                    arr[index] = bucket[k][l];
//                    index++;
//                }
//            }
//            //第一轮处理后，要将bucketElementCounts[k]置零
//            bucketElementCounts[k] = 0;
//        }
//        System.out.println(Arrays.toString(arr));

        //先找到最大的数
        int max = arr[0];//假设第一个就是最大数字
        for (int i = 1; i < arr.length; i++){
            if (arr[i] > max){
                max = arr[i];
            }
        }
        //得到最大的位数
        int maxLength = (max + "").length();

        //使用循环处理代码
        for (int i = 0, n = 1; i < maxLength; i++, n *= 10){
            for (int j = 0; j < arr.length; ++j){
                //取各位
                int digitOfElement = arr[j] / n % 10;
                bucket[digitOfElement][bucketElementCounts[digitOfElement]] = arr[j];
                bucketElementCounts[digitOfElement]++;
            }
            //按照桶的顺序取出
            int index = 0;
            //遍历每一个桶，并将桶中的每一个数据放回原数组
            for (int k = 0; k < bucketElementCounts.length; k++){
                //如果桶中有数据，我们才放入到原数组
                if (bucketElementCounts[k] != 0){
                    //循环该桶，将数据放入
                    for (int l = 0; l < bucketElementCounts[k]; l++ ){
                        //取出元素，放入arr
                        arr[index] = bucket[k][l];
                        index++;
                    }
                }

                bucketElementCounts[k] = 0;
            }
        }
        System.out.println(Arrays.toString(arr));

    }
}


时间测试

package com.zjx.sort;

import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;

public class RadixSort {
    public static void main(String[] args) {
//        int arr[] = {53, 3, 542, 748, 14, 214};

        int arr[] = new int[80000];
        for (int i = 0; i < 80000; i++) {
            arr[i] = (int) (Math.random() * 800000); //[0, 800000)
        }
        //测试时间
        Date date = new Date();
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        String date1Str = simpleDateFormat.format(date);
        System.out.println("排序前的时间是" + date1Str);

        radixSort(arr);

//        System.out.println("排序后的数组");
//        System.out.println(Arrays.toString(arr));

        Date date2 = new Date();
        String date2Str = simpleDateFormat.format(date2);
        System.out.println("排序后的时间是" + date2Str);

    }

    public static void radixSort(int arr[]){
        //每个桶其实是一个一维数组，整体是一个二位数组
        //空间换时间
        int[][] bucket = new int[10][arr.length];

        //为了记录每个桶中实际存放了多少数据，我们定义一个一维数组来记录每个桶放入的数据个数
        int[] bucketElementCounts = new int[10];

//        //第一轮，针对个位
//        for (int j = 0; j < arr.length; ++j){
//            //取各位
//            int digitOfElement = arr[j] % 10;
//            bucket[digitOfElement][bucketElementCounts[digitOfElement]] = arr[j];
//            bucketElementCounts[digitOfElement]++;
//        }
//        //按照桶的顺序取出
//        int index = 0;
//        //遍历每一个桶，并将桶中的每一个数据放回原数组
//        for (int k = 0; k < bucketElementCounts.length; k++){
//            //如果桶中有数据，我们才放入到原数组
//            if (bucketElementCounts[k] != 0){
//                //循环该桶，将数据放入
//                for (int l = 0; l < bucketElementCounts[k]; l++ ){
//                    //取出元素，放入arr
//                    arr[index] = bucket[k][l];
//                    index++;
//                }
//            }
//
//            bucketElementCounts[k] = 0;
//        }
//        System.out.println(Arrays.toString(arr));
//
//        //第二轮，针对十位
//        for (int j = 0; j < arr.length; ++j){
//            //取各位
//            int digitOfElement = arr[j] / 10 % 10;
//            bucket[digitOfElement][bucketElementCounts[digitOfElement]] = arr[j];
//            bucketElementCounts[digitOfElement]++;
//        }
//        //按照桶的顺序取出
//        index = 0;
//        //遍历每一个桶，并将桶中的每一个数据放回原数组
//        for (int k = 0; k < bucketElementCounts.length; k++){
//            //如果桶中有数据，我们才放入到原数组
//            if (bucketElementCounts[k] != 0){
//                //循环该桶，将数据放入
//                for (int l = 0; l < bucketElementCounts[k]; l++ ){
//                    //取出元素，放入arr
//                    arr[index] = bucket[k][l];
//                    index++;
//                }
//            }
//            //第一轮处理后，要将bucketElementCounts[k]置零
//            bucketElementCounts[k] = 0;
//        }
//        System.out.println(Arrays.toString(arr));

        //先找到最大的数
        int max = arr[0];//假设第一个就是最大数字
        for (int i = 1; i < arr.length; i++){
            if (arr[i] > max){
                max = arr[i];
            }
        }
        //得到最大的位数
        int maxLength = (max + "").length();

        //使用循环处理代码
        for (int i = 0, n = 1; i < maxLength; i++, n *= 10){
            for (int j = 0; j < arr.length; ++j){
                //取各位
                int digitOfElement = arr[j] / n % 10;
                bucket[digitOfElement][bucketElementCounts[digitOfElement]] = arr[j];
                bucketElementCounts[digitOfElement]++;
            }
            //按照桶的顺序取出
            int index = 0;
            //遍历每一个桶，并将桶中的每一个数据放回原数组
            for (int k = 0; k < bucketElementCounts.length; k++){
                //如果桶中有数据，我们才放入到原数组
                if (bucketElementCounts[k] != 0){
                    //循环该桶，将数据放入
                    for (int l = 0; l < bucketElementCounts[k]; l++ ){
                        //取出元素，放入arr
                        arr[index] = bucket[k][l];
                        index++;
                    }
                }

                bucketElementCounts[k] = 0;
            }
        }
//        System.out.println(Arrays.toString(arr));

    }
}


最快，但是占内存太多了，可能出现内存溢出


