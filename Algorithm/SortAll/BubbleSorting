冒泡排序：从前向后依次比较相邻元素的值，若发现逆序则交换，使值较大的元素逐渐从前向后移动
图解排序：
3 9 -1 10 20 （原始数组）

第一趟：3和9比较，不变 3 9 -1 10 20
       9和-1比较，交换 3 -1 9 10 20
       9和10比较，不变  3 -1 9 10 20
       10和20比较，不变  3 -1 9 10 20（确定最大的数据是20）
       
第二趟：3和-1比较，变换  -1 3 9 10 20
       3和9比较，不变 -1 3 9 10 20
       9和10比较，不变 -1 3 9 10 20（其次大的数据是10）

       
第三趟：-1和3比较，不变  -1 3 9 10 20
       3和9比较，不变 -1 3 9 10 20（其次大的数据是9）
       
第四趟：-1和3比较，不变  -1 3 9 10 20（其次大的数据是3）

1. 一共要进行数字-1次排序
2. 每一趟排序的次数在逐渐减少
3. 如果发现在某趟排序中没有发生交换，可以提前结束冒泡排序

package com.zjx.sort;

import java.util.Arrays;

public class BubbleSort {
    public static void main(String[] args) {
        int arr[] = {3, 9, -1, 10, 2};
//        //第一趟：排四次找到最大放最后
//        int temp = 0; //用来交换
//        for (int i = 0; i < arr.length - 1; i++) {
//            if (arr[i] > arr[i + 1]){
//               temp =  arr[i];
//               arr[i] = arr[i + 1];
//                arr[i + 1] = temp;
//            }
//        }
//        System.out.println("第一趟排序之后的数组");
//        System.out.println(Arrays.toString(arr));
//
//        //第二趟，排三次找到次大，放倒数第二
//        for (int i = 0; i < arr.length - 2; i++) {
//            if (arr[i] > arr[i + 1]){
//                temp =  arr[i];
//                arr[i] = arr[i + 1];
//                arr[i + 1] = temp;
//            }
//        }
//        System.out.println("第二趟排序之后的数组");
//        System.out.println(Arrays.toString(arr));
//
//        //第三趟，排两次找到次大，放倒数第三
//        for (int i = 0; i < arr.length - 3; i++) {
//            if (arr[i] > arr[i + 1]){
//                temp =  arr[i];
//                arr[i] = arr[i + 1];
//                arr[i + 1] = temp;
//            }
//        }
//        System.out.println("第三趟排序之后的数组");
//        System.out.println(Arrays.toString(arr));
//
//        //第四趟，排一次找到次大，放倒数第四
//        for (int i = 0; i < arr.length - 4; i++) {
//            if (arr[i] > arr[i + 1]){
//                temp =  arr[i];
//                arr[i] = arr[i + 1];
//                arr[i + 1] = temp;
//            }
//        }
//        System.out.println("第四趟排序之后的数组");
//        System.out.println(Arrays.toString(arr));

        for (int i = 0; i < arr.length - 1; i++) {
            for (int j = 0; j < arr.length - 1 - i; j++) {
                int temp = 0;
                if (arr[j] > arr[j + 1]){
                    temp =  arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                }
            }
            System.out.printf("第%d趟排序之后的数组", i + 1);
            System.out.println(Arrays.toString(arr));
        }
    }
}


优化：
package com.zjx.sort;

import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;

public class BubbleSort {
    public static void main(String[] args) {
//        int arr[] = {3, 9, -1, 10, 2};
//        int arr[] = {1, 2, 3, 4, 5};
        //测试冒泡排序的速度，给80k个数据进行测试
        int arr[] = new int[80000];
        for (int i = 0; i < 80000; i++) {
            arr[i] = (int) (Math.random() * 800000); //[0, 800000)
        }
        //测试时间
        Date date = new Date();
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        String date1Str = simpleDateFormat.format(date);
        System.out.println("排序前的时间是" + date1Str);

        bubbleSort(arr);
//        System.out.println("排序后的数组");
//        System.out.println(Arrays.toString(arr));

        Date date2 = new Date();
        String date2Str = simpleDateFormat.format(date2);
        System.out.println("排序后的时间是" + date2Str);

//        //第一趟：排四次找到最大放最后
//        int temp = 0; //用来交换
//        for (int i = 0; i < arr.length - 1; i++) {
//            if (arr[i] > arr[i + 1]){
//               temp =  arr[i];
//               arr[i] = arr[i + 1];
//                arr[i + 1] = temp;
//            }
//        }
//        System.out.println("第一趟排序之后的数组");
//        System.out.println(Arrays.toString(arr));
//
//        //第二趟，排三次找到次大，放倒数第二
//        for (int i = 0; i < arr.length - 2; i++) {
//            if (arr[i] > arr[i + 1]){
//                temp =  arr[i];
//                arr[i] = arr[i + 1];
//                arr[i + 1] = temp;
//            }
//        }
//        System.out.println("第二趟排序之后的数组");
//        System.out.println(Arrays.toString(arr));
//
//        //第三趟，排两次找到次大，放倒数第三
//        for (int i = 0; i < arr.length - 3; i++) {
//            if (arr[i] > arr[i + 1]){
//                temp =  arr[i];
//                arr[i] = arr[i + 1];
//                arr[i + 1] = temp;
//            }
//        }
//        System.out.println("第三趟排序之后的数组");
//        System.out.println(Arrays.toString(arr));
//
//        //第四趟，排一次找到次大，放倒数第四
//        for (int i = 0; i < arr.length - 4; i++) {
//            if (arr[i] > arr[i + 1]){
//                temp =  arr[i];
//                arr[i] = arr[i + 1];
//                arr[i + 1] = temp;
//            }
//        }
//        System.out.println("第四趟排序之后的数组");
//        System.out.println(Arrays.toString(arr));
    }

    //将冒泡排序封装称方法
    public static void bubbleSort(int[] arr){
        int temp = 0;
        boolean flag = false; //用来标志是否进行过交换
        for (int i = 0; i < arr.length - 1; i++) {
            for (int j = 0; j < arr.length - 1 - i; j++) {
                if (arr[j] > arr[j + 1]){
                    flag = true;
                    temp =  arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                }
            }
//            System.out.printf("第%d趟排序之后的数组", i + 1);
//            System.out.println(Arrays.toString(arr));
            if(!flag) break;
            else flag = false; //重置flag，进行下次判断
        }
    }
}

时间大概16s
