时间频度T(n)：语句执行的次数
忽略常数项，忽略低次项，忽略系数（幂系数占主导时忽略系数）

时间复杂度O(n)：存在某个辅助函数f(n)，使得T(n)/f(n)的极限值为不等于0的常数，则称f(n)是T(n)的同量级函数。记作T(n)=O(f(n))，称O(f(n))为算法的渐进时间复杂度，简称时间复杂度。
注意，对于不同的T(n)，我们可能有相同的O(n)。T(n)=n²+7n+6 与 T(n)=3n²+2n+2 它们的T(n) 不同，但时间复杂度相同，都为O(n²)。

计算时间复杂度的方法
1. 用常数1代替运行时间中的所有加法常数
2. 修改后的运行次数函数中，只保留最高次项
3. 去除最高阶项的系数

常见的时间复杂度
常数阶O(1)： 没有循环等复杂结构
对数阶O(log2n): while(i<n){i = i * 2;}
线性阶O(n): 单纯的for循环
线性对数阶O(nlog2n)： 将O(log2n)的代码循环n次就是线性对数阶
平方阶O(n^2)： 两层for循环，每层n次
立方阶O(n^3)
k次方阶O(n^k)
指数阶O(2^n)

我们一般考虑最坏时间复杂度

空间复杂度：该算法耗费的储存时间
