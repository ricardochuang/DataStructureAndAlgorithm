找中间，对比大小
注意返回条件

package com.zjx.search;

public class SeqSearch {
    public static void main(String[] args) {
        int arr[] = {1, 9, 11, -1, 34, 89};
        int index = seqSearch(arr, -11);
        if (index == -1) System.out.println("没找到");
        else System.out.println("下标是" + index);
    }
    public static int seqSearch(int[] arr, int value){
        //线性查找：逐一比对
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] == value) return i;
        }
        return -1;
    }
}


package com.zjx.search;

import java.util.ArrayList;
import java.util.List;

public class BinarySearch {
    public static void main(String[] args) {
//        int[] arr = {1, 8, 10, 89, 1000, 1234};
//        int resIndex = binarySearch(arr, 0, arr.length - 1, 1234);
//        System.out.println(resIndex);
        int[] arr = {1, 8, 10, 89, 1000};
        List<Integer> resIndexList = binarySearch2(arr, 0, arr.length - 1, 10010);
        System.out.println(resIndexList);
    }

    /**
     *
     * @param arr 数组
     * @param left 左侧索引
     * @param right 右侧索引
     * @param findVal 要查找的值
     * @return 返回的下标
     */
    public static int binarySearch(int[] arr,int left, int right, int findVal){
        //left > right 找不到

        if (left > right) return -1;

        int mid = (left + right) / 2;
        int midVal = arr[mid];

        if (findVal > midVal){ //向右
            return binarySearch(arr, mid + 1, right, findVal);
        } else if (findVal < midVal){ //向左
            return binarySearch(arr, left, mid - 1, findVal);
        } else return mid;

    }

    //如果有多个要找的数字
    /*
    找到mid后不要马上返回，向左扫描，加入list中
    向右边扫描，加入list
     */
    public static List<Integer> binarySearch2(int[] arr, int left, int right, int findVal){
        //left > right 找不到

        if (left > right) return new ArrayList<>();

        int mid = (left + right) / 2;
        int midVal = arr[mid];

        if (findVal > midVal){ //向右
            return binarySearch2(arr, mid + 1, right, findVal);
        } else if (findVal < midVal){ //向左
            return binarySearch2(arr, left, mid - 1, findVal);
        } else {
            ArrayList<Integer> resIndexlist = new ArrayList<>();
            //向左扫描
            int temp = mid - 1;
            //向左扫描，找重复数
            while (true){
                if (temp < 0 || arr[temp] != findVal) break;
                resIndexlist.add(temp);
                temp--;
            }
            //向左扫描结束，把中间数值加入
            resIndexlist.add(mid);
            //向右扫描
            temp = mid + 1;
            while (true){
                if (temp > arr.length - 1 || arr[temp] != findVal) break;
                resIndexlist.add(temp);
                temp++;
            }
            return resIndexlist;
        }

    }

}
