赫夫曼编码
变长编码：先统计各个字符出现的个数，出现的次数越多，给的编码越小. 但是某一个字符的编码可能是其他编码的前缀
赫夫曼编码： 
1. 先统计各个字符出现的个数
2. 按照上面的字符构建赫夫曼树，次数作为权值
3. 根据赫夫曼树，给各个字符编码，规定向左为0，向右为1

package com.zjx.huffmancode;

import java.util.*;

public class HuffmanCode {
    public static void main(String[] args) {
        String content = "i like like like java do you like a java";
        byte[] contentBytes = content.getBytes();

        List<Node> nodes = getNodes(contentBytes);
        System.out.println(nodes);

        System.out.println("赫夫曼树");
        Node huffmanTreeRoot = createHuffmanTree(nodes);
        preOrder(huffmanTreeRoot);

        //测试哈夫曼编码
//        getCode(huffmanTreeRoot, "", stringBuilder);
        getCodes(huffmanTreeRoot);
        System.out.println("生成的编码表" + huffmanCodes);

        byte[] huffmanCodeBytes = zip(contentBytes, huffmanCodes);
        System.out.println(Arrays.toString(huffmanCodeBytes));
    }
    //用统计byte[]中每个byte出现的次数，然后将Map中的数字放到List里面
    private static List<Node> getNodes(byte[] bytes){
        //先创建ArrayList
        ArrayList<Node> nodes = new ArrayList<>();
        //存入每个byte出现的次数(map)
        Map<Byte, Integer> counts = new HashMap<>(); //注意，集合中只能用包装类
        for (byte b: bytes) {
            Integer count = counts.get(b);
            if (count == null) counts.put(b, 1);
            else counts.put(b, count + 1);
        }
        //将键值对转为Node对象，并加入到nodes集合
        //遍历map
        for (Map.Entry<Byte, Integer> entry: counts.entrySet()) {
            nodes.add(new Node(entry.getKey(), entry.getValue()));
        }
        return nodes;
    }
    //构建HuffmanTree
    private static Node createHuffmanTree(List<Node> nodes){
        while (nodes.size() > 1){
            Collections.sort(nodes);
            Node leftNode = nodes.get(0);
            Node rightNode = nodes.get(1);
            //新二叉树的根节点没有data，只有weight
            Node parent = new Node(null, leftNode.weight + rightNode.weight);
            parent.left = leftNode;
            parent.right = rightNode;
            nodes.remove(leftNode);
            nodes.remove(rightNode);
            nodes.add(parent);
        }
        return nodes.get(0);
    }
    //前序遍历
    private static void preOrder(Node root){
        if (root == null) System.out.println("无法遍历");
        else root.preOrder();
    }
    //将赫夫曼树转成赫夫曼表
    //1. 将赫夫曼编码放到Map<Byte, String>中
    static Map<Byte, String> huffmanCodes = new HashMap<>();
    //2. 在生成赫夫曼编码表时，拼接路径。定义一个StringBuilder来存叶子节点的路径
    static StringBuilder stringBuilder = new StringBuilder();

    //为了调用方便，重载方法
    private static Map<Byte, String> getCodes(Node root){
        if (root == null) return null;
        getCode(root.left, "0", stringBuilder);
        getCode(root.right, "1", stringBuilder);
        return huffmanCodes;
    }
    /**
     * 功能：将传入的node的所有叶子节点的哈夫曼编码放入到HuffmanCodes集合
     * @param node 传入的节点
     * @param code 路径：左子节点是0，右子节点是1
     * @param stringBuilder 用来拼接路径
     */
    private static void getCode(Node node, String code, StringBuilder stringBuilder){
        StringBuilder stringBuilder2 = new StringBuilder(stringBuilder);
        stringBuilder2.append(code);
        if (node != null){
            //判断是不是叶子节点
            if (node.data == null){//非叶子节点
                //递归
                getCode(node.left, "0", stringBuilder2);
                getCode(node.right, "1", stringBuilder2);
            } else {
                //是叶子节点
                huffmanCodes.put(node.data, stringBuilder2.toString());
            }
        }
    }

    /**
     *
     * @param bytes 原始的字符串对应的byte[]
     * @param huffmanCodes 生成的赫夫曼编码map
     * @return 返回赫夫曼编码处理后的byte[]
     *  对于之前的String content = "i like like like java do you like a java"，会有一个编码
     *  然后将这个编码转成一个byte[]数组（每8位存一次） 其实存入的是一个补码
     *  因为之前的content长度只有40，而新生成的表很大，所以要压缩
     */
    //编写一个方法，将字符串对应的byte[]数组，通过生成的赫夫曼编码表，返回一个赫夫曼编码
    private static byte[] zip(byte[] bytes, Map<Byte, String> huffmanCodes){
        //先使用赫夫曼编码表，将byte转成赫夫曼编码对应的字符串
        StringBuilder stringBuilder = new StringBuilder();
        for(byte b : bytes){
            stringBuilder.append(huffmanCodes.get(b));
        }
//        System.out.println(stringBuilder.toString());
        //将“1010100010...”转成byte[]
        int len;
        if (stringBuilder.length() %8 == 0) len = stringBuilder.length() / 8;
        else len = stringBuilder.length() / 8 + 1;
        //用一句话代替上面的写法： int len = (stringBuilder.length() + 7) / 8;

        //创建存储压缩后byte数组
         byte[] huffmanCodeBytes =  new byte[len];
         int index = 0; //记录是第几个byte
        for (int i = 0; i < stringBuilder.length(); i += 8) {//因为每8位对应一个byte，所以步长+8
            String strByte;
            if (i + 8 > stringBuilder.length()){ //如果长度不够8位
                strByte = stringBuilder.substring(i);
            }else {
                strByte = stringBuilder.substring(i, i + 8);
            }
            //将strByte转成一个byte，放入到HuffmanCodeBytes
            huffmanCodeBytes[index] = (byte)Integer.parseInt(strByte,2);
            index++;
        }
        return huffmanCodeBytes;
    }

}

class Node implements Comparable<Node>{
    Byte data;
    int weight; //数据的出现次数
    Node left;
    Node right;

    public Node(Byte data, int weight) {
        this.data = data;
        this.weight = weight;
    }

    @Override
    public int compareTo(Node o) {
        return this.weight - o.weight;
    }

    @Override
    public String toString() {
        return "Node{" +
                "data=" + data +
                ", weight=" + weight +
                '}';
    }
    //前序遍历
    public void preOrder(){
        System.out.println(this);
        if (this.left != null) this.left.preOrder();
        if (this.right != null) this.right.preOrder();
    }
}


封装之后

package com.zjx.huffmancode;

import java.util.*;

public class HuffmanCode {
    public static void main(String[] args) {
        String content = "i like like like java do you like a java";
        byte[] contentBytes = content.getBytes();
        byte[] huffmanCodesBytes = huffmanZip(contentBytes);
        System.out.println(Arrays.toString(huffmanCodesBytes));
        /*
        List<Node> nodes = getNodes(contentBytes);
        System.out.println(nodes);

        System.out.println("赫夫曼树");
        Node huffmanTreeRoot = createHuffmanTree(nodes);
        preOrder(huffmanTreeRoot);

        //测试哈夫曼编码
//        getCode(huffmanTreeRoot, "", stringBuilder);
        getCodes(huffmanTreeRoot);
        System.out.println("生成的编码表" + huffmanCodes);

        byte[] huffmanCodeBytes = zip(contentBytes, huffmanCodes);
        System.out.println(Arrays.toString(huffmanCodeBytes));
         */
    }
    //用统计byte[]中每个byte出现的次数，然后将Map中的数字放到List里面
    private static List<Node> getNodes(byte[] bytes){
        //先创建ArrayList
        ArrayList<Node> nodes = new ArrayList<>();
        //存入每个byte出现的次数(map)
        Map<Byte, Integer> counts = new HashMap<>(); //注意，集合中只能用包装类
        for (byte b: bytes) {
            Integer count = counts.get(b);
            if (count == null) counts.put(b, 1);
            else counts.put(b, count + 1);
        }
        //将键值对转为Node对象，并加入到nodes集合
        //遍历map
        for (Map.Entry<Byte, Integer> entry: counts.entrySet()) {
            nodes.add(new Node(entry.getKey(), entry.getValue()));
        }
        return nodes;
    }
    //构建HuffmanTree
    private static Node createHuffmanTree(List<Node> nodes){
        while (nodes.size() > 1){
            Collections.sort(nodes);
            Node leftNode = nodes.get(0);
            Node rightNode = nodes.get(1);
            //新二叉树的根节点没有data，只有weight
            Node parent = new Node(null, leftNode.weight + rightNode.weight);
            parent.left = leftNode;
            parent.right = rightNode;
            nodes.remove(leftNode);
            nodes.remove(rightNode);
            nodes.add(parent);
        }
        return nodes.get(0);
    }
    //前序遍历
    private static void preOrder(Node root){
        if (root == null) System.out.println("无法遍历");
        else root.preOrder();
    }
    //将赫夫曼树转成赫夫曼表
    //1. 将赫夫曼编码放到Map<Byte, String>中
    static Map<Byte, String> huffmanCodes = new HashMap<>();
    //2. 在生成赫夫曼编码表时，拼接路径。定义一个StringBuilder来存叶子节点的路径
    static StringBuilder stringBuilder = new StringBuilder();

    //为了调用方便，重载方法
    private static Map<Byte, String> getCodes(Node root){
        if (root == null) return null;
        getCode(root.left, "0", stringBuilder);
        getCode(root.right, "1", stringBuilder);
        return huffmanCodes;
    }
    /**
     * 功能：将传入的node的所有叶子节点的哈夫曼编码放入到HuffmanCodes集合
     * @param node 传入的节点
     * @param code 路径：左子节点是0，右子节点是1
     * @param stringBuilder 用来拼接路径
     */
    private static void getCode(Node node, String code, StringBuilder stringBuilder){
        StringBuilder stringBuilder2 = new StringBuilder(stringBuilder);
        stringBuilder2.append(code);
        if (node != null){
            //判断是不是叶子节点
            if (node.data == null){//非叶子节点
                //递归
                getCode(node.left, "0", stringBuilder2);
                getCode(node.right, "1", stringBuilder2);
            } else {
                //是叶子节点
                huffmanCodes.put(node.data, stringBuilder2.toString());
            }
        }
    }

    /**
     *
     * @param bytes 原始的字符串对应的byte[]
     * @param huffmanCodes 生成的赫夫曼编码map
     * @return 返回赫夫曼编码处理后的byte[]
     *  对于之前的String content = "i like like like java do you like a java"，会有一个编码
     *  然后将这个编码转成一个byte[]数组（每8位存一次） 其实存入的是一个补码
     *  因为之前的content长度只有40，而新生成的表很大，所以要压缩
     */
    //编写一个方法，将字符串对应的byte[]数组，通过生成的赫夫曼编码表，返回一个赫夫曼编码
    private static byte[] zip(byte[] bytes, Map<Byte, String> huffmanCodes){
        //先使用赫夫曼编码表，将byte转成赫夫曼编码对应的字符串
        StringBuilder stringBuilder = new StringBuilder();
        for(byte b : bytes){
            stringBuilder.append(huffmanCodes.get(b));
        }
//        System.out.println(stringBuilder.toString());
        //将“1010100010...”转成byte[]
        int len;
        if (stringBuilder.length() %8 == 0) len = stringBuilder.length() / 8;
        else len = stringBuilder.length() / 8 + 1;
        //用一句话代替上面的写法： int len = (stringBuilder.length() + 7) / 8;

        //创建存储压缩后byte数组
         byte[] huffmanCodeBytes =  new byte[len];
         int index = 0; //记录是第几个byte
        for (int i = 0; i < stringBuilder.length(); i += 8) {//因为每8位对应一个byte，所以步长+8
            String strByte;
            if (i + 8 > stringBuilder.length()){ //如果长度不够8位
                strByte = stringBuilder.substring(i);
            }else {
                strByte = stringBuilder.substring(i, i + 8);
            }
            //将strByte转成一个byte，放入到HuffmanCodeBytes
            huffmanCodeBytes[index] = (byte)Integer.parseInt(strByte,2);
            index++;
        }
        return huffmanCodeBytes;
    }


    //实现封装

    /**
     *
     * @param bytes 原始字节数组
     * @return 压缩后的字节数组
     */
    private static byte[] huffmanZip(byte[] bytes){
        List<Node> nodes = getNodes(bytes);
        //根据nodes创建赫夫曼树
        Node huffmanTreeRoot = createHuffmanTree(nodes);
        //根据赫夫曼树，得到对应的赫夫曼编码
        Map<Byte, String> huffmanCodes = getCodes(huffmanTreeRoot);
        //根据生成的赫夫曼编码，压缩得到赫夫曼编码字节数组
        byte[] huffmanCodeBytes = zip(bytes, huffmanCodes);
        return huffmanCodeBytes;
    }

}

class Node implements Comparable<Node>{
    Byte data;
    int weight; //数据的出现次数
    Node left;
    Node right;

    public Node(Byte data, int weight) {
        this.data = data;
        this.weight = weight;
    }

    @Override
    public int compareTo(Node o) {
        return this.weight - o.weight;
    }

    @Override
    public String toString() {
        return "Node{" +
                "data=" + data +
                ", weight=" + weight +
                '}';
    }
    //前序遍历
    public void preOrder(){
        System.out.println(this);
        if (this.left != null) this.left.preOrder();
        if (this.right != null) this.right.preOrder();
    }
}


解码
1. 将HuffmancodeBytes转成对应的二进制字符串
2. 将二进制字符串转成对应的赫夫曼编码

package com.zjx.huffmancode;

import java.util.*;

public class HuffmanCode {
    public static void main(String[] args) {
        String content = "i like like like java do you like a java";
        byte[] contentBytes = content.getBytes();
        byte[] huffmanCodesBytes = huffmanZip(contentBytes);
        System.out.println(Arrays.toString(huffmanCodesBytes));

//        System.out.println(byteToBitString((byte)-1));
        byte[] sourceBytes = decode(huffmanCodes, huffmanCodesBytes);
        System.out.println("原来的字符串 = " + new String(sourceBytes));
        /*
        List<Node> nodes = getNodes(contentBytes);
        System.out.println(nodes);

        System.out.println("赫夫曼树");
        Node huffmanTreeRoot = createHuffmanTree(nodes);
        preOrder(huffmanTreeRoot);

        //测试哈夫曼编码
//        getCode(huffmanTreeRoot, "", stringBuilder);
        getCodes(huffmanTreeRoot);
        System.out.println("生成的编码表" + huffmanCodes);

        byte[] huffmanCodeBytes = zip(contentBytes, huffmanCodes);
        System.out.println(Arrays.toString(huffmanCodeBytes));
         */
    }
    //用统计byte[]中每个byte出现的次数，然后将Map中的数字放到List里面
    private static List<Node> getNodes(byte[] bytes){
        //先创建ArrayList
        ArrayList<Node> nodes = new ArrayList<>();
        //存入每个byte出现的次数(map)
        Map<Byte, Integer> counts = new HashMap<>(); //注意，集合中只能用包装类
        for (byte b: bytes) {
            Integer count = counts.get(b);
            if (count == null) counts.put(b, 1);
            else counts.put(b, count + 1);
        }
        //将键值对转为Node对象，并加入到nodes集合
        //遍历map
        for (Map.Entry<Byte, Integer> entry: counts.entrySet()) {
            nodes.add(new Node(entry.getKey(), entry.getValue()));
        }
        return nodes;
    }
    //构建HuffmanTree
    private static Node createHuffmanTree(List<Node> nodes){
        while (nodes.size() > 1){
            Collections.sort(nodes);
            Node leftNode = nodes.get(0);
            Node rightNode = nodes.get(1);
            //新二叉树的根节点没有data，只有weight
            Node parent = new Node(null, leftNode.weight + rightNode.weight);
            parent.left = leftNode;
            parent.right = rightNode;
            nodes.remove(leftNode);
            nodes.remove(rightNode);
            nodes.add(parent);
        }
        return nodes.get(0);
    }
    //前序遍历
    private static void preOrder(Node root){
        if (root == null) System.out.println("无法遍历");
        else root.preOrder();
    }
    //将赫夫曼树转成赫夫曼表
    //1. 将赫夫曼编码放到Map<Byte, String>中
    static Map<Byte, String> huffmanCodes = new HashMap<>();
    //2. 在生成赫夫曼编码表时，拼接路径。定义一个StringBuilder来存叶子节点的路径
    static StringBuilder stringBuilder = new StringBuilder();

    //为了调用方便，重载方法
    private static Map<Byte, String> getCodes(Node root){
        if (root == null) return null;
        getCode(root.left, "0", stringBuilder);
        getCode(root.right, "1", stringBuilder);
        return huffmanCodes;
    }
    /**
     * 功能：将传入的node的所有叶子节点的哈夫曼编码放入到HuffmanCodes集合
     * @param node 传入的节点
     * @param code 路径：左子节点是0，右子节点是1
     * @param stringBuilder 用来拼接路径
     */
    private static void getCode(Node node, String code, StringBuilder stringBuilder){
        StringBuilder stringBuilder2 = new StringBuilder(stringBuilder);
        stringBuilder2.append(code);
        if (node != null){
            //判断是不是叶子节点
            if (node.data == null){//非叶子节点
                //递归
                getCode(node.left, "0", stringBuilder2);
                getCode(node.right, "1", stringBuilder2);
            } else {
                //是叶子节点
                huffmanCodes.put(node.data, stringBuilder2.toString());
            }
        }
    }

    /**
     *
     * @param bytes 原始的字符串对应的byte[]
     * @param huffmanCodes 生成的赫夫曼编码map
     * @return 返回赫夫曼编码处理后的byte[]
     *  对于之前的String content = "i like like like java do you like a java"，会有一个编码
     *  然后将这个编码转成一个byte[]数组（每8位存一次） 其实存入的是一个补码
     *  因为之前的content长度只有40，而新生成的表很大，所以要压缩
     */
    //编写一个方法，将字符串对应的byte[]数组，通过生成的赫夫曼编码表，返回一个赫夫曼编码
    private static byte[] zip(byte[] bytes, Map<Byte, String> huffmanCodes){
        //先使用赫夫曼编码表，将byte转成赫夫曼编码对应的字符串
        StringBuilder stringBuilder = new StringBuilder();
        for(byte b : bytes){
            stringBuilder.append(huffmanCodes.get(b));
        }
//        System.out.println(stringBuilder.toString());
        //将“1010100010...”转成byte[]
        int len;
        if (stringBuilder.length() %8 == 0) len = stringBuilder.length() / 8;
        else len = stringBuilder.length() / 8 + 1;
        //用一句话代替上面的写法： int len = (stringBuilder.length() + 7) / 8;

        //创建存储压缩后byte数组
         byte[] huffmanCodeBytes =  new byte[len];
         int index = 0; //记录是第几个byte
        for (int i = 0; i < stringBuilder.length(); i += 8) {//因为每8位对应一个byte，所以步长+8
            String strByte;
            if (i + 8 > stringBuilder.length()){ //如果长度不够8位
                strByte = stringBuilder.substring(i);
            }else {
                strByte = stringBuilder.substring(i, i + 8);
            }
            //将strByte转成一个byte，放入到HuffmanCodeBytes
            huffmanCodeBytes[index] = (byte)Integer.parseInt(strByte,2);
            index++;
        }
        return huffmanCodeBytes;
    }


    //实现封装

    /**
     *
     * @param bytes 原始字节数组
     * @return 压缩后的字节数组
     */
    private static byte[] huffmanZip(byte[] bytes){
        List<Node> nodes = getNodes(bytes);
        //根据nodes创建赫夫曼树
        Node huffmanTreeRoot = createHuffmanTree(nodes);
        //根据赫夫曼树，得到对应的赫夫曼编码
        Map<Byte, String> huffmanCodes = getCodes(huffmanTreeRoot);
        //根据生成的赫夫曼编码，压缩得到赫夫曼编码字节数组
        byte[] huffmanCodeBytes = zip(bytes, huffmanCodes);
        return huffmanCodeBytes;
    }

    /**
     * 将一个byte转成一个二进制字符串
     * @param b
     * @param flag 标志是否需要补高位，true是要补高位，false不用补充高位
     * @return 该b对应的二进制的字符串（注意是按照补码返回）
     */
    private static String byteToBitString(boolean flag, byte b){
        //使用变量保存b
        int temp = b;
        //如果是正数，需要补高位
        if (flag){
            temp |= 256;
        }
        String str = Integer.toBinaryString(temp);
        if (flag){
            return str.substring(str.length() - 8);
        }
        else return str;
    }
    //将二进制字符转为字符串
    /**
     *
     * @param huffmanCodes 赫夫曼表map
     * @param huffmanBytes 赫夫曼编码得到的字节数组
     * @return 原来的字符串对应的数组
     */
    private static byte[] decode(Map<Byte, String> huffmanCodes, byte[] huffmanBytes){
        //先得到HuffmanBytes对应的二进制字符串，形式如10101000...
        StringBuilder stringBuilder = new StringBuilder();
        //将Byte数组转成二进制字符串
        for (int i = 0; i < huffmanBytes.length; i++) {
            byte b = huffmanBytes[i];
            boolean flag = (i == huffmanBytes.length - 1);
            stringBuilder.append(byteToBitString(!flag, b)); //判断是否是最后一个字节
        }
//        System.out.println("赫夫曼字节数对应的二进制字符串 = " + stringBuilder.toString());
        //把字符串按照指定的赫夫曼编码进行解码
        //把赫夫曼编码进行调换
        Map<String, Byte> map = new HashMap<>();
        for(Map.Entry<Byte, String> entry: huffmanCodes.entrySet()){
            map.put(entry.getValue(), entry.getKey());
        }
//        System.out.println("map = " + map);
       //创建集合，存放Byte
        List<Byte> list = new ArrayList<>();
        for (int i = 0; i < stringBuilder.length(); ) {
            int count = 1;
            boolean flag = true;
            Byte b = null;
            while (flag){
                //取出‘1’/'0'
                String key = stringBuilder.substring(i, i + count);
                b = map.get(key);
                if(b == null) count ++; //没有匹配到
                else flag = false; //匹配到
            }
            list.add(b);
            i += count; //i移动到count的位置
        }
        //for结束后，list中就存放了所有的字符
        //把list中的数据放入到一个byte[]并返回
        byte[] b =new byte[list.size()];
        for (int i = 0; i < b.length; i++) {
            b[i] = list.get(i);
        }
        return b;
    }

}

class Node implements Comparable<Node>{
    Byte data;
    int weight; //数据的出现次数
    Node left;
    Node right;

    public Node(Byte data, int weight) {
        this.data = data;
        this.weight = weight;
    }

    @Override
    public int compareTo(Node o) {
        return this.weight - o.weight;
    }

    @Override
    public String toString() {
        return "Node{" +
                "data=" + data +
                ", weight=" + weight +
                '}';
    }
    //前序遍历
    public void preOrder(){
        System.out.println(this);
        if (this.left != null) this.left.preOrder();
        if (this.right != null) this.right.preOrder();
    }
}

文件的压缩
package com.zjx.huffmancode;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.util.*;

public class HuffmanCode {
    public static void main(String[] args) {
        String content = "i like like like java do you like a java";
        byte[] contentBytes = content.getBytes();
        byte[] huffmanCodesBytes = huffmanZip(contentBytes);
        System.out.println(Arrays.toString(huffmanCodesBytes));

//        System.out.println(byteToBitString((byte)-1));
        byte[] sourceBytes = decode(huffmanCodes, huffmanCodesBytes);
        System.out.println("原来的字符串 = " + new String(sourceBytes));

        //测试压缩文件
        String srcFile = "C:\\Users\\张嘉祥\\Desktop\\payment.png";
        String dstFile = "C:\\Users\\张嘉祥\\Desktop\\dst.zip";
        zipFile(srcFile, dstFile);
        System.out.println("压缩完成");

        /*
        List<Node> nodes = getNodes(contentBytes);
        System.out.println(nodes);

        System.out.println("赫夫曼树");
        Node huffmanTreeRoot = createHuffmanTree(nodes);
        preOrder(huffmanTreeRoot);

        //测试哈夫曼编码
//        getCode(huffmanTreeRoot, "", stringBuilder);
        getCodes(huffmanTreeRoot);
        System.out.println("生成的编码表" + huffmanCodes);

        byte[] huffmanCodeBytes = zip(contentBytes, huffmanCodes);
        System.out.println(Arrays.toString(huffmanCodeBytes));
         */
    }
    //用统计byte[]中每个byte出现的次数，然后将Map中的数字放到List里面
    private static List<Node> getNodes(byte[] bytes){
        //先创建ArrayList
        ArrayList<Node> nodes = new ArrayList<>();
        //存入每个byte出现的次数(map)
        Map<Byte, Integer> counts = new HashMap<>(); //注意，集合中只能用包装类
        for (byte b: bytes) {
            Integer count = counts.get(b);
            if (count == null) counts.put(b, 1);
            else counts.put(b, count + 1);
        }
        //将键值对转为Node对象，并加入到nodes集合
        //遍历map
        for (Map.Entry<Byte, Integer> entry: counts.entrySet()) {
            nodes.add(new Node(entry.getKey(), entry.getValue()));
        }
        return nodes;
    }
    //构建HuffmanTree
    private static Node createHuffmanTree(List<Node> nodes){
        while (nodes.size() > 1){
            Collections.sort(nodes);
            Node leftNode = nodes.get(0);
            Node rightNode = nodes.get(1);
            //新二叉树的根节点没有data，只有weight
            Node parent = new Node(null, leftNode.weight + rightNode.weight);
            parent.left = leftNode;
            parent.right = rightNode;
            nodes.remove(leftNode);
            nodes.remove(rightNode);
            nodes.add(parent);
        }
        return nodes.get(0);
    }
    //前序遍历
    private static void preOrder(Node root){
        if (root == null) System.out.println("无法遍历");
        else root.preOrder();
    }
    //将赫夫曼树转成赫夫曼表
    //1. 将赫夫曼编码放到Map<Byte, String>中
    static Map<Byte, String> huffmanCodes = new HashMap<>();
    //2. 在生成赫夫曼编码表时，拼接路径。定义一个StringBuilder来存叶子节点的路径
    static StringBuilder stringBuilder = new StringBuilder();

    //为了调用方便，重载方法
    private static Map<Byte, String> getCodes(Node root){
        if (root == null) return null;
        getCode(root.left, "0", stringBuilder);
        getCode(root.right, "1", stringBuilder);
        return huffmanCodes;
    }
    /**
     * 功能：将传入的node的所有叶子节点的哈夫曼编码放入到HuffmanCodes集合
     * @param node 传入的节点
     * @param code 路径：左子节点是0，右子节点是1
     * @param stringBuilder 用来拼接路径
     */
    private static void getCode(Node node, String code, StringBuilder stringBuilder){
        StringBuilder stringBuilder2 = new StringBuilder(stringBuilder);
        stringBuilder2.append(code);
        if (node != null){
            //判断是不是叶子节点
            if (node.data == null){//非叶子节点
                //递归
                getCode(node.left, "0", stringBuilder2);
                getCode(node.right, "1", stringBuilder2);
            } else {
                //是叶子节点
                huffmanCodes.put(node.data, stringBuilder2.toString());
            }
        }
    }

    /**
     *
     * @param bytes 原始的字符串对应的byte[]
     * @param huffmanCodes 生成的赫夫曼编码map
     * @return 返回赫夫曼编码处理后的byte[]
     *  对于之前的String content = "i like like like java do you like a java"，会有一个编码
     *  然后将这个编码转成一个byte[]数组（每8位存一次） 其实存入的是一个补码
     *  因为之前的content长度只有40，而新生成的表很大，所以要压缩
     */
    //编写一个方法，将字符串对应的byte[]数组，通过生成的赫夫曼编码表，返回一个赫夫曼编码
    private static byte[] zip(byte[] bytes, Map<Byte, String> huffmanCodes){
        //先使用赫夫曼编码表，将byte转成赫夫曼编码对应的字符串
        StringBuilder stringBuilder = new StringBuilder();
        for(byte b : bytes){
            stringBuilder.append(huffmanCodes.get(b));
        }
//        System.out.println(stringBuilder.toString());
        //将“1010100010...”转成byte[]
        int len;
        if (stringBuilder.length() %8 == 0) len = stringBuilder.length() / 8;
        else len = stringBuilder.length() / 8 + 1;
        //用一句话代替上面的写法： int len = (stringBuilder.length() + 7) / 8;

        //创建存储压缩后byte数组
         byte[] huffmanCodeBytes =  new byte[len];
         int index = 0; //记录是第几个byte
        for (int i = 0; i < stringBuilder.length(); i += 8) {//因为每8位对应一个byte，所以步长+8
            String strByte;
            if (i + 8 > stringBuilder.length()){ //如果长度不够8位
                strByte = stringBuilder.substring(i);
            }else {
                strByte = stringBuilder.substring(i, i + 8);
            }
            //将strByte转成一个byte，放入到HuffmanCodeBytes
            huffmanCodeBytes[index] = (byte)Integer.parseInt(strByte,2);
            index++;
        }
        return huffmanCodeBytes;
    }


    //实现封装

    /**
     *
     * @param bytes 原始字节数组
     * @return 压缩后的字节数组
     */
    private static byte[] huffmanZip(byte[] bytes){
        List<Node> nodes = getNodes(bytes);
        //根据nodes创建赫夫曼树
        Node huffmanTreeRoot = createHuffmanTree(nodes);
        //根据赫夫曼树，得到对应的赫夫曼编码
        Map<Byte, String> huffmanCodes = getCodes(huffmanTreeRoot);
        //根据生成的赫夫曼编码，压缩得到赫夫曼编码字节数组
        byte[] huffmanCodeBytes = zip(bytes, huffmanCodes);
        return huffmanCodeBytes;
    }

    /**
     * 将一个byte转成一个二进制字符串
     * @param b
     * @param flag 标志是否需要补高位，true是要补高位，false不用补充高位
     * @return 该b对应的二进制的字符串（注意是按照补码返回）
     */
    private static String byteToBitString(boolean flag, byte b){
        //使用变量保存b
        int temp = b;
        //如果是正数，需要补高位
        if (flag){
            temp |= 256;
        }
        String str = Integer.toBinaryString(temp);
        if (flag){
            return str.substring(str.length() - 8);
        }
        else return str;
    }
    //将二进制字符转为字符串
    /**
     *
     * @param huffmanCodes 赫夫曼表map
     * @param huffmanBytes 赫夫曼编码得到的字节数组
     * @return 原来的字符串对应的数组
     */
    private static byte[] decode(Map<Byte, String> huffmanCodes, byte[] huffmanBytes){
        //先得到HuffmanBytes对应的二进制字符串，形式如10101000...
        StringBuilder stringBuilder = new StringBuilder();
        //将Byte数组转成二进制字符串
        for (int i = 0; i < huffmanBytes.length; i++) {
            byte b = huffmanBytes[i];
            boolean flag = (i == huffmanBytes.length - 1);
            stringBuilder.append(byteToBitString(!flag, b)); //判断是否是最后一个字节
        }
//        System.out.println("赫夫曼字节数对应的二进制字符串 = " + stringBuilder.toString());
        //把字符串按照指定的赫夫曼编码进行解码
        //把赫夫曼编码进行调换
        Map<String, Byte> map = new HashMap<>();
        for(Map.Entry<Byte, String> entry: huffmanCodes.entrySet()){
            map.put(entry.getValue(), entry.getKey());
        }
//        System.out.println("map = " + map);
       //创建集合，存放Byte
        List<Byte> list = new ArrayList<>();
        for (int i = 0; i < stringBuilder.length(); ) {
            int count = 1;
            boolean flag = true;
            Byte b = null;
            while (flag){
                //取出‘1’/'0'
                String key = stringBuilder.substring(i, i + count);
                b = map.get(key);
                if(b == null) count ++; //没有匹配到
                else flag = false; //匹配到
            }
            list.add(b);
            i += count; //i移动到count的位置
        }
        //for结束后，list中就存放了所有的字符
        //把list中的数据放入到一个byte[]并返回
        byte[] b =new byte[list.size()];
        for (int i = 0; i < b.length; i++) {
            b[i] = list.get(i);
        }
        return b;
    }

    //编写方法，将文件进行压缩

    /**
     *
     * @param srcFile 传入的文件的路径
     * @param desFile 压缩文件放到哪个目录下
     */
    private static void zipFile(String srcFile, String desFile){
        FileInputStream is = null;
        OutputStream os = null;
        ObjectOutputStream oos = null;
        try{
            //创建文件输入流
            is = new FileInputStream(srcFile);
            //创建一个和源文件大小一样的byte数组
            byte[] b = new byte[is.available()];
            //读取文件
            is.read(b);
            //对原文件进行压缩，获取到文件对应的赫夫曼编码表
            byte[] huffmanBytes = huffmanZip(b);
            //创建文件输出流
            os = new FileOutputStream(desFile);
            //创建一个和文件输出流关联的ObjectOutputStream
            oos = new ObjectOutputStream(os);
            //我们以对象流的方式写入赫夫曼编码，是为了我们以后恢复源文件时使用
            oos.writeObject(huffmanBytes); //把赫夫曼编码后的字节数组写入压缩文件
            oos.writeObject(huffmanCodes); //把赫夫曼编码写入压缩文件，方便解压

        }catch (Exception e){
            System.out.println(e.getMessage());
        }finally {
            try{
                is.close();
                oos.close();
                os.close();
            }catch (Exception e){
                System.out.println(e.getMessage());
            }
        }
    }

}

class Node implements Comparable<Node>{
    Byte data;
    int weight; //数据的出现次数
    Node left;
    Node right;

    public Node(Byte data, int weight) {
        this.data = data;
        this.weight = weight;
    }

    @Override
    public int compareTo(Node o) {
        return this.weight - o.weight;
    }

    @Override
    public String toString() {
        return "Node{" +
                "data=" + data +
                ", weight=" + weight +
                '}';
    }
    //前序遍历
    public void preOrder(){
        System.out.println(this);
        if (this.left != null) this.left.preOrder();
        if (this.right != null) this.right.preOrder();
    }
}



修改了bug后的最终版
package com.zjx.huffmancode;

import java.io.*;
import java.util.*;

public class HuffmanCode {
    private static int countZero;

    public static void main(String[] args) {
//        String content = "i like like like java do you like a java 00";
//        byte[] contentBytes = content.getBytes();
//        byte[] huffmanCodesBytes = huffmanZip(contentBytes);
//        System.out.println("huffmanCodesBytes is = "+Arrays.toString(huffmanCodesBytes));

//        System.out.println(byteToBitString((byte)-1));
//        byte[] sourceBytes = decode(huffmanCodes, huffmanCodesBytes, countZero);
//        System.out.println("原来的字符串 = " + new String(sourceBytes));

        //测试压缩文件
//        String srcFile = "C:\\Users\\张嘉祥\\Desktop\\payment.png";
//        String dstFile = "C:\\Users\\张嘉祥\\Desktop\\dst.zip";
//        zipFile(srcFile, dstFile);
//        System.out.println("压缩完成");

//        String srcFile = "C:\\Users\\张嘉祥\\Desktop\\数据结构和算法.xls";
//        String dstFile = "C:\\Users\\张嘉祥\\Desktop\\dst.zip";
//        zipFile(srcFile, dstFile);
//        System.out.println("压缩完成");

        //测试解压文件
//        String zipFile = "C:\\Users\\张嘉祥\\Desktop\\dst.zip";
//        String dstFile2 = "C:\\Users\\张嘉祥\\Desktop\\payment2.png";
//        unzipFile(zipFile, dstFile2);
//        System.out.println("解压完成");
        
        String zipFile = "C:\\Users\\张嘉祥\\Desktop\\dst.zip";
        String dstFile2 = "C:\\Users\\张嘉祥\\Desktop\\payment2.xls";
        unzipFile(zipFile, dstFile2);
        System.out.println("解压完成");

        /*
        List<Node> nodes = getNodes(contentBytes);
        System.out.println(nodes);

        System.out.println("赫夫曼树");
        Node huffmanTreeRoot = createHuffmanTree(nodes);
        preOrder(huffmanTreeRoot);

        //测试哈夫曼编码
//        getCode(huffmanTreeRoot, "", stringBuilder);
        getCodes(huffmanTreeRoot);
        System.out.println("生成的编码表" + huffmanCodes);

        byte[] huffmanCodeBytes = zip(contentBytes, huffmanCodes);
        System.out.println(Arrays.toString(huffmanCodeBytes));
         */
    }
    //用统计byte[]中每个byte出现的次数，然后将Map中的数字放到List里面
    private static List<Node> getNodes(byte[] bytes){
        //先创建ArrayList
        ArrayList<Node> nodes = new ArrayList<>();
        //存入每个byte出现的次数(map)
        Map<Byte, Integer> counts = new HashMap<>(); //注意，集合中只能用包装类
        for (byte b: bytes) {
            Integer count = counts.get(b);
            if (count == null) counts.put(b, 1);
            else counts.put(b, count + 1);
        }
        //将键值对转为Node对象，并加入到nodes集合
        //遍历map
        for (Map.Entry<Byte, Integer> entry: counts.entrySet()) {
            nodes.add(new Node(entry.getKey(), entry.getValue()));
        }
        return nodes;
    }
    //构建HuffmanTree
    private static Node createHuffmanTree(List<Node> nodes){
        while (nodes.size() > 1){
            Collections.sort(nodes);
            Node leftNode = nodes.get(0);
            Node rightNode = nodes.get(1);
            //新二叉树的根节点没有data，只有weight
            Node parent = new Node(null, leftNode.weight + rightNode.weight);
            parent.left = leftNode;
            parent.right = rightNode;
            nodes.remove(leftNode);
            nodes.remove(rightNode);
            nodes.add(parent);
        }
        return nodes.get(0);
    }
    //前序遍历
    private static void preOrder(Node root){
        if (root == null) System.out.println("无法遍历");
        else root.preOrder();
    }
    //将赫夫曼树转成赫夫曼表
    //1. 将赫夫曼编码放到Map<Byte, String>中
    static Map<Byte, String> huffmanCodes = new HashMap<>();
    //2. 在生成赫夫曼编码表时，拼接路径。定义一个StringBuilder来存叶子节点的路径
    static StringBuilder stringBuilder = new StringBuilder();

    //为了调用方便，重载方法
    private static Map<Byte, String> getCodes(Node root){
        if (root == null) return null;
        getCode(root.left, "0", stringBuilder);
        getCode(root.right, "1", stringBuilder);
        return huffmanCodes;
    }
    /**
     * 功能：将传入的node的所有叶子节点的哈夫曼编码放入到HuffmanCodes集合
     * @param node 传入的节点
     * @param code 路径：左子节点是0，右子节点是1
     * @param stringBuilder 用来拼接路径
     */
    private static void getCode(Node node, String code, StringBuilder stringBuilder){
        StringBuilder stringBuilder2 = new StringBuilder(stringBuilder);
        stringBuilder2.append(code);
        if (node != null){
            //判断是不是叶子节点
            if (node.data == null){//非叶子节点
                //递归
                getCode(node.left, "0", stringBuilder2);
                getCode(node.right, "1", stringBuilder2);
            } else {
                //是叶子节点
                huffmanCodes.put(node.data, stringBuilder2.toString());
            }
        }
    }

    /**
     *
     * @param bytes 原始的字符串对应的byte[]
     * @param huffmanCodes 生成的赫夫曼编码map
     * @return 返回赫夫曼编码处理后的byte[]
     *  对于之前的String content = "i like like like java do you like a java"，会有一个编码
     *  然后将这个编码转成一个byte[]数组（每8位存一次） 其实存入的是一个补码
     *  因为之前的content长度只有40，而新生成的表很大，所以要压缩
     */
    //编写一个方法，将字符串对应的byte[]数组，通过生成的赫夫曼编码表，返回一个赫夫曼编码
    private static byte[] zip(byte[] bytes, Map<Byte, String> huffmanCodes){
        //先使用赫夫曼编码表，将byte转成赫夫曼编码对应的字符串
        StringBuilder stringBuilder = new StringBuilder();
        for(byte b : bytes){
            stringBuilder.append(huffmanCodes.get(b));
        }
//        System.out.println(stringBuilder.toString());
        //将“1010100010...”转成byte[]
        int len;
        if (stringBuilder.length() %8 == 0) len = stringBuilder.length() / 8;
        else len = stringBuilder.length() / 8 + 1;
        //用一句话代替上面的写法： int len = (stringBuilder.length() + 7) / 8;

        //创建存储压缩后byte数组
         byte[] huffmanCodeBytes =  new byte[len];
         int index = 0; //记录是第几个byte
        for (int i = 0; i < stringBuilder.length(); i += 8) {//因为每8位对应一个byte，所以步长+8
            String strByte;
            if (i + 8 > stringBuilder.length()){ //如果长度不够8位
                strByte = stringBuilder.substring(i);
                int j = i;
                while (j < stringBuilder.length() - 1 && '0' == stringBuilder.charAt(j++)){
                    countZero++;
                }
                System.out.println("countZero = " + countZero);
            }else {
                strByte = stringBuilder.substring(i, i + 8);
            }
            //将strByte转成一个byte，放入到HuffmanCodeBytes
            huffmanCodeBytes[index] = (byte)Integer.parseInt(strByte,2);
            index++;
        }
        return huffmanCodeBytes;
    }


    //实现封装

    /**
     *
     * @param bytes 原始字节数组
     * @return 压缩后的字节数组
     */
    private static byte[] huffmanZip(byte[] bytes){
        List<Node> nodes = getNodes(bytes);
        //根据nodes创建赫夫曼树
        Node huffmanTreeRoot = createHuffmanTree(nodes);
        //根据赫夫曼树，得到对应的赫夫曼编码
        Map<Byte, String> huffmanCodes = getCodes(huffmanTreeRoot);
        //根据生成的赫夫曼编码，压缩得到赫夫曼编码字节数组
        byte[] huffmanCodeBytes = zip(bytes, huffmanCodes);
        return huffmanCodeBytes;
    }

    /**
     * 将一个byte转成一个二进制字符串
     * @param b
     * @param flag 标志是否需要补高位，true是要补高位，false不用补充高位
     * @return 该b对应的二进制的字符串（注意是按照补码返回）
     */
    private static String byteToBitString(boolean flag, byte b, int countZero){
//        System.out.println("补位的时候countZero是" + countZero);
        //使用变量保存b
        int temp = b;
        //如果是正数，需要补高位
        if (flag){
            temp |= 256;
        }
        StringBuilder str = new StringBuilder(Integer.toBinaryString(temp));
        if (flag){
            return str.substring(str.length() - 8);
        }
        else
        {
//            System.out.println("需要补位的str是" + str.toString());
            while (countZero-- > 0){
                str.insert(0, "0");
            }
//            System.out.println("补位结束countZero是" + countZero);
//            System.out.println("补位结束的str是" + str.toString());
            return str.toString();
        }
    }
    //将二进制字符转为字符串
    /**
     *
     * @param huffmanCodes 赫夫曼表map
     * @param huffmanBytes 赫夫曼编码得到的字节数组
     * @return 原来的字符串对应的数组
     */
    private static byte[] decode(Map<Byte, String> huffmanCodes, byte[] huffmanBytes, int countZero){
        System.out.println("解码的时候countZero是" + countZero);
        //先得到HuffmanBytes对应的二进制字符串，形式如10101000...
        StringBuilder stringBuilder = new StringBuilder();
        //将Byte数组转成二进制字符串
        for (int i = 0; i < huffmanBytes.length; i++) {
            byte b = huffmanBytes[i];
            boolean flag = (i == huffmanBytes.length - 1);
            stringBuilder.append(byteToBitString(!flag, b, countZero)); //判断是否是最后一个字节
        }
//        System.out.println("赫夫曼字节数对应的二进制字符串 = " + stringBuilder.toString());
        //把字符串按照指定的赫夫曼编码进行解码
        //把赫夫曼编码进行调换
        Map<String, Byte> map = new HashMap<>();
        for(Map.Entry<Byte, String> entry: huffmanCodes.entrySet()){
            map.put(entry.getValue(), entry.getKey());
        }
//        System.out.println("map = " + map);
       //创建集合，存放Byte
        List<Byte> list = new ArrayList<>();
        for (int i = 0; i < stringBuilder.length(); ) {
            int count = 1;
            boolean flag = true;
            Byte b = null;
            while (flag){
                //取出‘1’/'0'
                String key = stringBuilder.substring(i, i + count);
                b = map.get(key);
                if(b == null) count ++; //没有匹配到
                else flag = false; //匹配到
            }
            list.add(b);
            System.out.println(b);
            i += count; //i移动到count的位置
        }
        System.out.println("得到了list");
        //for结束后，list中就存放了所有的字符
        //把list中的数据放入到一个byte[]并返回
        byte[] b =new byte[list.size()];
        for (int i = 0; i < b.length; i++) {
            b[i] = list.get(i);
        }
        return b;
    }

    //编写方法，将文件进行压缩

    /**
     *
     * @param srcFile 传入的文件的路径
     * @param desFile 压缩文件放到哪个目录下
     */
    private static void zipFile(String srcFile, String desFile){
        FileInputStream is = null;
        OutputStream os = null;
        ObjectOutputStream oos = null;
        try{
            //创建文件输入流
            is = new FileInputStream(srcFile);
            //创建一个和源文件大小一样的byte数组
            byte[] b = new byte[is.available()]; //只会开一个数组，里面全是空的
//            System.out.println("b is" + Arrays.toString(b));
            //读取文件
            is.read(b);
//            System.out.println("b is" + Arrays.toString(b));
//            System.out.println(b.length);
            //对原文件进行压缩，获取到文件对应的赫夫曼编码表
            byte[] huffmanBytes = huffmanZip(b);
//            System.out.println("huffmanBytes is "+ Arrays.toString(huffmanBytes));
//            System.out.println(huffmanBytes.length);
            //创建文件输出流
            os = new FileOutputStream(desFile);
            //创建一个和文件输出流关联的ObjectOutputStream
            oos = new ObjectOutputStream(os);
            //我们以对象流的方式写入赫夫曼编码，是为了我们以后恢复源文件时使用
            oos.writeObject(huffmanBytes); //把赫夫曼编码后的字节数组写入压缩文件
//            System.out.println(Arrays.toString(huffmanBytes));
            oos.writeObject(huffmanCodes); //把赫夫曼编码写入压缩文件，方便解压
//            System.out.println(huffmanCodes);
            oos.writeObject(countZero);
            System.out.println("写入文件的countZero是" + countZero);

        }catch (Exception e){
            System.out.println(e.getMessage());
        }finally {
            try{
                oos.close();
                os.close();
                is.close();
            }catch (Exception e){
                System.out.println(e.getMessage());
            }
        }
    }

    /**
     * 完成对文件的解压
     * @param zipFile 准备解压的文件
     * @param dstFile 将文件解压到哪个路径
     */
    private static void unzipFile(String zipFile, String dstFile){
        //定义输入流
        InputStream is = null;
        //定义对象输入流
        ObjectInputStream ois = null;
        //定义文件输出流
        OutputStream os = null;
        try {
//            System.out.println("成功进入try块");
            //创建文件输入流
            is = new FileInputStream(zipFile);
            //创建一个和is关联的对象输入流
            ois = new ObjectInputStream(is);
            //读取数组
            byte[] huffmanBytes = (byte[]) ois.readObject();
            //读取赫夫曼编码表
            Map<Byte, String> huffmanCodes = (Map<Byte, String>) ois.readObject();
            int countZero = (int) ois.readObject();
//            System.out.println("从文件中取出的countZero是" + countZero);
            System.out.println("开始解码");
            byte[] bytes = decode(huffmanCodes, huffmanBytes, countZero);
            System.out.println("成功解码");
            System.out.println("得到的byte的长度是" + bytes.length);
            //将bytes写入目标文件
            os = new FileOutputStream(dstFile);
            //写文件到dstFile
            os.write(bytes);
        }catch (Exception e){
            System.out.println(e.getMessage());
        }finally {
            try {
                os.close();
                ois.close();
                is.close();
            }catch (Exception e2){
                System.out.println(e2.getMessage());
            }
        }
    }

}

class Node implements Comparable<Node>{
    Byte data;
    int weight; //数据的出现次数
    Node left;
    Node right;

    public Node(Byte data, int weight) {
        this.data = data;
        this.weight = weight;
    }

    @Override
    public int compareTo(Node o) {
        return this.weight - o.weight;
    }

    @Override
    public String toString() {
        return "Node{" +
                "data=" + data +
                ", weight=" + weight +
                '}';
    }
    //前序遍历
    public void preOrder(){
        System.out.println(this);
        if (this.left != null) this.left.preOrder();
        if (this.right != null) this.right.preOrder();
    }
}
