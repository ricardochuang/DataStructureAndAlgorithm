暴力匹配算法解决字符串问题
package com.zjx.kmp;

public class ViolenceMatch {
    public static void main(String[] args) {
        String str1 = "lkj hgf asdfghjklokjusdf";
        String str2 = "asdfghjkl";
        int index = violenceMatch(str1, str2);
        System.out.println(index);
    }
    public static int violenceMatch(String str1, String str2){
        char[] s1 = str1.toCharArray();
        char[] s2 = str2.toCharArray();
        int s1Len = s1.length;
        int s2Len = s2.length;
        int i = 0; //指向s1
        int j = 0; //指向s2
        while (i < s1Len && j < s2Len){
            if (s1[i] == s2[j]){
                i++;
                j++;
            }
            else {
                i = i - (j - 1);
                j = 0;
            }
        }
        //判断是否匹配成功
        if (j == s2Len) return i - j;
        return -1;
    }
}

KMP:
“部分匹配值”就是“前缀”和“后缀”的最长的共有元素的长度。
以“ABCDABD”为例：
"A", "AB", "ABC", "ABCD" 的前缀和后缀的共有元素长度都是0
"ABCDA"的前缀：“A, AB, ABC, ABCD”, 后缀“BCDA, CDA, DA,A”, 所以部分匹配值是1
“ABCDABD” 的部分匹配则为2
移动位数： 已匹配的字符数 - 对应的部分匹配值

