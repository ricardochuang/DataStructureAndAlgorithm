暴力匹配算法解决字符串问题
package com.zjx.kmp;

public class ViolenceMatch {
    public static void main(String[] args) {
        String str1 = "lkj hgf asdfghjklokjusdf";
        String str2 = "asdfghjkl";
        int index = violenceMatch(str1, str2);
        System.out.println(index);
    }
    public static int violenceMatch(String str1, String str2){
        char[] s1 = str1.toCharArray();
        char[] s2 = str2.toCharArray();
        int s1Len = s1.length;
        int s2Len = s2.length;
        int i = 0; //指向s1
        int j = 0; //指向s2
        while (i < s1Len && j < s2Len){
            if (s1[i] == s2[j]){
                i++;
                j++;
            }
            else {
                i = i - (j - 1);
                j = 0;
            }
        }
        //判断是否匹配成功
        if (j == s2Len) return i - j;
        return -1;
    }
}

KMP:
“部分匹配值”就是“前缀”和“后缀”的最长的共有元素的长度。
以“ABCDABD”为例：
"A", "AB", "ABC", "ABCD" 的前缀和后缀的共有元素长度都是0
"ABCDA"的前缀：“A, AB, ABC, ABCD”, 后缀“BCDA, CDA, DA,A”, 所以部分匹配值是1
“ABCDABD” 的部分匹配则为2
移动位数： 已匹配的字符数 - 对应的部分匹配值

package com.zjx.kmp;

import java.util.Arrays;

public class KMPAlgorithm {
    public static void main(String[] args) {
        String str1 = "BBC ABCDAB ABCDABCDABDE";
        String str2 = "ABCDABD";

        int[] next = kmpNext(str2);
        System.out.println(Arrays.toString(next));

        int index = kmpSearch(str1, str2, next);
        System.out.println(index);
    }
    //获取一个字符串的部分匹配值的表
    public static int[] kmpNext(String dest){
        int[] next = new int[dest.length()]; //用来保存部分匹配值
        next[0] = 0; //如果字符串长度为1，那么部分匹配值一定为0
        for (int i = 1, j = 0; i < dest.length(); i++){
            //如果dest.charAt(i) != dest.charAt(j)
            //直到 dest.charAt(i) == dest.charAt(j) 才退出
            while (j > 0 && dest.charAt(i) != dest.charAt(j)){
                j = next[j - 1];
            }
            if (dest.charAt(i) == dest.charAt(j)){
                j++; //相等出现时，部分匹配+1
            }
            next[i] = j;
        }
        return next;
    }

    /**
     * kmp搜索算法
     * @param str1 源字符串
     * @param str2 子串
     * @param next 子串的部分匹配表
     * @return 没有找到返回-1，找到了返第一个匹配的位置
     */
    public static int kmpSearch(String str1, String str2, int[] next){
        for (int i = 0, j = 0; i < str1.length(); i++){
            //考虑str1.charAt(i) ！= str2.charAt(j)
            while (j > 0 && str1.charAt(i) != str2.charAt(j)){
                j = next[j - 1];
            }
            if (str1.charAt(i) == str2.charAt(j)){
                j++;
            }
            if (j == str2.length()) return i - j + 1;
        }
        return -1;
    }
}
