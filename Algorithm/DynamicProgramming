将大问题划分为小问题进行解决，从而一步步获取最优解的处理算法。
与分治不同的是，适合于动态规划求解的问题，经分解得到子问题往往不是互相独立的。

动态规划解决背包问题：
每次遍历到第i个物品，根据w[i],v[i]来确定是否要将该物品放入背包中。即对给决定的n个物品，设v[i],w[i]分别为第i个物品的价值和重量，C为背包的容量。
再令v[i][j]表示在前i个物品中能够装入容量为j的背包的最大价值

(1) v[i][0] = v[0][j] = 0; //表示填入的表的第一行和第一列是0
(2) 当w[i] > j时： v[i][j] = v[i - 1][j] //当新增商品的体积大于背包的容量时，直接使用上一个单元格的策略
(3) 当j >= w[i]时： v[i][j] = max{v[i - 1][j], v[i - 1][j - w[i]] + v[i]} 
//当准备加入的商品的体积 小于等于 当前背包的容量
//装入方式： v[i - 1][j]就是上一个单元格装入的最大值 v[i]：当前商品的价值 v[i - 1][j - w[i]]：装入i - 1个商品到剩余空间j - w[i]的最大值
