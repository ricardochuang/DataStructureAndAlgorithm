将大问题划分为小问题进行解决，从而一步步获取最优解的处理算法。
与分治不同的是，适合于动态规划求解的问题，经分解得到子问题往往不是互相独立的。

动态规划解决背包问题：
每次遍历到第i个物品，根据w[i],v[i]来确定是否要将该物品放入背包中。即对给决定的n个物品，设v[i],w[i]分别为第i个物品的价值和重量，C为背包的容量。
再令v[i][j]表示在前i个物品中能够装入容量为j的背包的最大价值

(1) v[i][0] = v[0][j] = 0; //表示填入的表的第一行和第一列是0
(2) 当w[i] > j时： v[i][j] = v[i - 1][j] //当新增商品的体积大于背包的容量时，直接使用上一个单元格的策略
(3) 当j >= w[i]时： v[i][j] = max{v[i - 1][j], v[i - 1][j - w[i]] + v[i]} 
//当准备加入的商品的体积 小于等于 当前背包的容量
//装入方式： v[i - 1][j]就是上一个单元格装入的最大值 v[i]：当前商品的价值 v[i - 1][j - w[i]]：装入i - 1个商品到剩余空间j - w[i]的最大值

package com.zjx.dynamic;

public class KnapsackProblem {
    public static void main(String[] args) {
        int[] w = {1, 4, 3}; //物品的重量
        int[] val = {1500, 3000, 2000}; //物品的价值
        int m = 4; //背包的容量
        int n = val.length; //物品的个数
        //为了记录放入商品的情况，定义一个二维数组
        int[][] path = new int[n + 1][m + 1];

        //v[i][j] 表示在前i个物品中能够装入容量为j的背包中的最大价值
        int[][] v = new int[n + 1][m + 1];
        
        //初始化第一行，第一列
        for (int i = 0; i < v.length; i++) {
            v[i][0] = 0; //第一列为0
        }
        for (int i = 0; i < v[0].length; i++) {
            v[0][i] = 0;
        }
        //动态规划
        for (int i = 1; i < v.length; i ++){
            for (int j = 1; j < v[0].length; j++) {
                if (w[i - 1] > j) v[i][j] = v[i - 1][j];
                else {
//                    v[i][j] = Math.max(v[i - 1][j], v[i - 1][j - w[i - 1]] + val[i - 1]);
                    //注意，因为i是从1开始，因此公式要调整
                    //为了记录商品存放的具体情况，使用if else来体现
                    if (v[i - 1][j] < v[i - 1][j - w[i - 1]] + val[i - 1]){
                        v[i][j] = v[i - 1][j - w[i - 1]] + val[i - 1];
                        path[i][j] = 1;
                    }else{
                        v[i][j] = v[i - 1][j];
                    }
                }
            }
        }
        //输出价值情况
        for (int i = 0; i < v.length; i++) {
            for (int j = 0; j < v[i].length; j++) {
                System.out.print(v[i][j] + " ");
            }
            System.out.println();
        }
        //输出放入的商品
//        for (int i = 0; i < path.length; i++) {
//            for (int j = 0; j < path[i].length; j++) {
//                if (path[i][j] == 1){
//                    System.out.printf("第%d个商品放入背包/n", i);
//                }
//            }
//        }
        int i = path.length - 1; //行的最大下标
        int j = path[0].length - 1; //列的最大下标
        while (i > 0 && j > 0){
            if (path[i][j] == 1){
                System.out.printf("第%d个商品放入背包\n", i);
                j -= w[i - 1]; //调整背包容量
            }
            i--;
        }
    }
}
